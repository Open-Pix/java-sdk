openapi: 3.0.3
info:
  description: |-
    A Woovi é uma Plataforma de Gestão de Pagamentos. Para utilizar nossa API você deve acessar  __[https://api.woovi.com/](https://api.woovi.com/)__ e somente o mesmo. A Woovi não aceita subdominios para a API.

    Veja como configurar seu acesso a nossa API [aqui](https://developers.woovi.com/docs/apis/api-getting-started).
  title: Woovi
  version: 1.0.0
servers:
- description: Production server
  url: https://api.woovi.com
security:
- AppID: []
tags:
- description: |
    Endpoint to manage Accounts
  name: account
- description: |
    Endpoint to manage exclusive cashbacks
  name: cashback-fidelity
- description: |
    Endpoint to manage Charges
  name: charge
- description: |
    Endpoint to manage charge refunds
  name: charge refund
- description: |
    Endpoint to manage Customer
  name: customer
- description: |
    Partners integrate affiliated companies.<br/>
    They can register new companies, manage them, and earn money from them.
  name: partner (request access)
- description: |
    Endpoint to init a payment using a Pix Key.
  name: payment (request access)
- description: |
    Endpoint to manage static QRCodes
  name: pixQrCode
- description: |
    Endpoint to manage Refunds
  name: refund
- description: |
    Endpoint to manage Subscriptions
  name: subscription
- description: |
    Endpoint to manage Transactions
  name: transactions
- description: |
    Endpoint to manage Webhooks
  name: webhook
paths:
  /api/v1/account/{accountId}:
    get:
      parameters:
      - description: ID of the Account
        example: 6290ccfd42831958a405debc
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                account:
                  accountId: 6290ccfd42831958a405debc
                  isDefault: true
                  balance:
                    total: 129430
                    blocked: 0
                    available: 129430
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_200_response'
          description: The Account retrieve using the given Account ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get an Account
      tags:
      - account
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/account/6290ccfd42831958a405debc",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/account/6290ccfd42831958a405debc \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/account/6290ccfd42831958a405debc",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/account/6290ccfd42831958a405debc", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/account/6290ccfd42831958a405debc\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/account/6290ccfd42831958a405debc")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/account/6290ccfd42831958a405debc")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /api/v1/account/:
    get:
      responses:
        "200":
          content:
            application/json:
              example:
                accounts:
                - accountId: 6290ccfd42831958a405debc
                  isDefault: true
                  balance:
                    total: 129430
                    blocked: 0
                    available: 129430
                - accountId: 6286b467a7910113577e00ce
                  isDefault: false
                  balance:
                    total: 130
                    blocked: 100
                    available: 30
              schema:
                $ref: '#/components/schemas/_api_v1_account__get_200_response'
          description: A list of Accounts
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get a list of Accounts
      tags:
      - account
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/account/",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/account/ \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/account/",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/account/", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/account/\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/account/")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/account/")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /api/v1/account/{accountId}/withdraw:
    post:
      description: An additional fee may be charged depending on the minimum free
        withdrawal amount. See more about at https://developers.openpix.com.br/docs/FAQ/faq-virtual-account/#onde-posso-consultar-as-taxas-da-minha-conta-virtual
      parameters:
      - description: ID of the Account
        example: 6290ccfd42831958a405debc
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              value: 7000
            schema:
              $ref: '#/components/schemas/_api_v1_account__accountId__withdraw_post_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                withdraw:
                  account:
                    accountId: 6290ccfd42831958a405debc
                    isDefault: true
                    balance:
                      total: 122430
                      blocked: 0
                      available: 122430
                  transaction:
                    endToEndId: E23114447202205191817cx6VMrbwtw6
                    transaction: 7000
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__withdraw_post_200_response'
          description: Withdraw and Acccount information
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Withdraw from an Account
      tags:
      - account
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/account/6290ccfd42831958a405debc/withdraw",
            "headers": {
              "content-type": "application/json",
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({value: 0}));
          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://api.woovi.com/api/v1/account/6290ccfd42831958a405debc/withdraw \
            --header 'Authorization: REPLACE_KEY_VALUE' \
            --header 'content-type: application/json' \
            --data '{"value":0}'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/account/6290ccfd42831958a405debc/withdraw",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "{\"value\":0}",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE",
              "content-type: application/json"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          payload = "{\"value\":0}"

          headers = {
              'content-type': "application/json",
              'Authorization': "REPLACE_KEY_VALUE"
              }

          conn.request("POST", "/api/v1/account/6290ccfd42831958a405debc/withdraw", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/account/6290ccfd42831958a405debc/withdraw\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"value\\\":0}\")\n\n\treq, _ :=\
          \ http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"value\":0}");
          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/account/6290ccfd42831958a405debc/withdraw")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/account/6290ccfd42831958a405debc/withdraw")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["content-type"] = 'application/json'
          request["Authorization"] = 'REPLACE_KEY_VALUE'
          request.body = "{\"value\":0}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /api/v1/cashback-fidelity/balance/{taxID}:
    get:
      parameters:
      - description: The raw tax ID from the customer you want to get the balance.
        examples:
          taxID:
            value: "60151449000182"
        explode: false
        in: path
        name: taxID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_cashback_fidelity_balance__taxID__get_200_response'
          description: Amount the user still has to receive.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get the exclusive cashback amount an user still has to receive by taxID.
      tags:
      - cashback-fidelity
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/cashback-fidelity/balance/%7BtaxID%7D",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/cashback-fidelity/balance/%7BtaxID%7D \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/cashback-fidelity/balance/%7BtaxID%7D",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/cashback-fidelity/balance/%7BtaxID%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/cashback-fidelity/balance/%7BtaxID%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/cashback-fidelity/balance/%7BtaxID%7D")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/cashback-fidelity/balance/%7BtaxID%7D")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /api/v1/cashback-fidelity:
    post:
      description: "Create a new cashback exclusive for the customer with a given\
        \ taxID. If the customer already has a pending excluisve cashback, this endpoint\
        \ will return it instead."
      requestBody:
        content:
          application/json:
            example:
              value: 100
              taxID: 11111111111
            schema:
              $ref: '#/components/schemas/_api_v1_cashback_fidelity_post_request'
        description: Customer's taxID and the cash
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_cashback_fidelity_post_200_response'
          description: "Didn't create a new cashback, returning previously existing\
            \ cashback information instead."
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_cashback_fidelity_post_201_response'
          description: New cashback created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get or create cashback for a customer.
      tags:
      - cashback-fidelity
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/cashback-fidelity",
            "headers": {
              "content-type": "application/json",
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({taxID: 'string', value: 0}));
          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://api.woovi.com/api/v1/cashback-fidelity \
            --header 'Authorization: REPLACE_KEY_VALUE' \
            --header 'content-type: application/json' \
            --data '{"taxID":"string","value":0}'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/cashback-fidelity",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "{\"taxID\":\"string\",\"value\":0}",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE",
              "content-type: application/json"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          payload = "{\"taxID\":\"string\",\"value\":0}"

          headers = {
              'content-type': "application/json",
              'Authorization': "REPLACE_KEY_VALUE"
              }

          conn.request("POST", "/api/v1/cashback-fidelity", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/cashback-fidelity\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"taxID\\\":\\\"string\\\",\\\"\
          value\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"taxID\":\"string\",\"value\":0}");
          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/cashback-fidelity")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/cashback-fidelity")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["content-type"] = 'application/json'
          request["Authorization"] = 'REPLACE_KEY_VALUE'
          request.body = "{\"taxID\":\"string\",\"value\":0}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /api/v1/charge/{id}:
    delete:
      parameters:
      - description: "charge ID or correlation ID. You will need URI encoding if your\
          \ correlation ID has characters outside the ASCII set or reserved characters\
          \ (%, \\#, /)."
        examples:
          chargeId:
            value: Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA==
          correlationID:
            value: fe7834b4060c488a9b0f89811be5f5cf
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_charge__id__delete_200_response'
          description: The charge deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Delete a charge
      tags:
      - charge
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/charge/%7Bid%7D",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://api.woovi.com/api/v1/charge/%7Bid%7D \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/charge/%7Bid%7D",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "DELETE",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("DELETE", "/api/v1/charge/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/charge/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/charge/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/charge/%7Bid%7D")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    get:
      parameters:
      - description: "charge ID or correlation ID. You will need URI encoding if your\
          \ correlation ID has characters outside the ASCII set or reserved characters\
          \ (%, \\#, /)."
        examples:
          chargeId:
            value: Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA==
          correlationID:
            value: fe7834b4060c488a9b0f89811be5f5cf
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_charge__id__get_200_response'
          description: The charge retrieve using the given ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get one charge
      tags:
      - charge
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/charge/%7Bid%7D",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/charge/%7Bid%7D \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/charge/%7Bid%7D",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/charge/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/charge/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/charge/%7Bid%7D")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/charge/%7Bid%7D")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /api/v1/charge:
    get:
      parameters:
      - explode: true
        in: query
        name: start
        required: false
        schema:
          description: Start date used in the query. Complies with RFC 3339.
          example: 2020-01-01T00:00:00Z
          format: date-time
          title: Start Date
          type: string
        style: form
      - explode: true
        in: query
        name: end
        required: false
        schema:
          description: End date used in the query. Complies with RFC 3339.
          example: 2020-12-01T17:00:00Z
          format: date-time
          title: End Date
          type: string
        style: form
      - explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - ACTIVE
          - COMPLETED
          - EXPIRED
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_charge_get_200_response'
          description: A list of charges
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get a list of charges
      tags:
      - charge
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://api.woovi.com/api/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE' \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Endpoint to create a new Charge for a customer
      parameters:
      - description: "Make the endpoint idempotent, will return an existent charge\
          \ if already has a one with the correlationID"
        examples:
          return_existing:
            value: true
        explode: true
        in: query
        name: return_existing
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            examples:
              Charge:
                value:
                  correlationID: 9134e286-6f71-427a-bf00-241681624587
                  value: 100
                  comment: good
                  customer:
                    name: Dan
                    taxID: "31324227036"
                    email: email0@example.com
                    phone: "5511999999999"
                  additionalInfo:
                  - key: Product
                    value: Pencil
                  - key: Invoice
                    value: "18476"
                  - key: Order
                    value: "302"
              Charge with Interests and Fines:
                value:
                  type: OVERDUE
                  correlationID: 9134e286-6f71-427a-bf00-241681624587
                  value: 100
                  comment: good
                  daysForDueDate: 5
                  daysAfterDueDate: 5
                  interests:
                    value: 10
                  fines:
                    value: 20
                  customer:
                    name: Dan
                    taxID: "31324227036"
                    email: email0@example.com
                    phone: "5511999999999"
                    address:
                      zipcode: "30421322"
                      street: Street
                      number: "100"
                      neighborhood: Neighborhood
                      city: Belo Horizonte
                      state: MG
                      complement: APTO
                      country: BR
                  additionalInfo:
                  - key: Product
                    value: Pencil
                  - key: Invoice
                    value: "18476"
                  - key: Order
                    value: "302"
            schema:
              $ref: '#/components/schemas/ChargePayload'
        description: Data to create a new charge
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_charge_post_200_response'
          description: Charge ID and also the generated Dynamic BR Code to be rendered
            as a QRCode
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Create a new Charge
      tags:
      - charge
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/charge?return_existing=SOME_BOOLEAN_VALUE",
            "headers": {
              "content-type": "application/json",
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            correlationID: 'string',
            value: 0,
            type: 'DYNAMIC',
            comment: 'string',
            identifier: 'string',
            expiresIn: 0,
            customer: {
              name: 'string',
              email: 'string',
              phone: 'string',
              taxID: 'string',
              correlationID: 'string',
              address: {
                zipcode: 'string',
                street: 'string',
                number: 'string',
                neighborhood: 'string',
                city: 'string',
                state: 'string',
                complement: 'string',
                country: 'string'
              }
            },
            daysForDueDate: 0,
            daysAfterDueDate: 0,
            interests: {value: 0},
            fines: {value: 0},
            additionalInfo: [{key: 'string', value: 'string'}]
          }));
          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url 'https://api.woovi.com/api/v1/charge?return_existing=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: REPLACE_KEY_VALUE' \
            --header 'content-type: application/json' \
            --data '{"correlationID":"string","value":0,"type":"DYNAMIC","comment":"string","identifier":"string","expiresIn":0,"customer":{"name":"string","email":"string","phone":"string","taxID":"string","correlationID":"string","address":{"zipcode":"string","street":"string","number":"string","neighborhood":"string","city":"string","state":"string","complement":"string","country":"string"}},"daysForDueDate":0,"daysAfterDueDate":0,"interests":{"value":0},"fines":{"value":0},"additionalInfo":[{"key":"string","value":"string"}]}'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/charge?return_existing=SOME_BOOLEAN_VALUE",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "{\"correlationID\":\"string\",\"value\":0,\"type\":\"DYNAMIC\",\"comment\":\"string\",\"identifier\":\"string\",\"expiresIn\":0,\"customer\":{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\",\"correlationID\":\"string\",\"address\":{\"zipcode\":\"string\",\"street\":\"string\",\"number\":\"string\",\"neighborhood\":\"string\",\"city\":\"string\",\"state\":\"string\",\"complement\":\"string\",\"country\":\"string\"}},\"daysForDueDate\":0,\"daysAfterDueDate\":0,\"interests\":{\"value\":0},\"fines\":{\"value\":0},\"additionalInfo\":[{\"key\":\"string\",\"value\":\"string\"}]}",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE",
              "content-type: application/json"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          payload = "{\"correlationID\":\"string\",\"value\":0,\"type\":\"DYNAMIC\",\"comment\":\"string\",\"identifier\":\"string\",\"expiresIn\":0,\"customer\":{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\",\"correlationID\":\"string\",\"address\":{\"zipcode\":\"string\",\"street\":\"string\",\"number\":\"string\",\"neighborhood\":\"string\",\"city\":\"string\",\"state\":\"string\",\"complement\":\"string\",\"country\":\"string\"}},\"daysForDueDate\":0,\"daysAfterDueDate\":0,\"interests\":{\"value\":0},\"fines\":{\"value\":0},\"additionalInfo\":[{\"key\":\"string\",\"value\":\"string\"}]}"

          headers = {
              'content-type': "application/json",
              'Authorization': "REPLACE_KEY_VALUE"
              }

          conn.request("POST", "/api/v1/charge?return_existing=SOME_BOOLEAN_VALUE", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/charge?return_existing=SOME_BOOLEAN_VALUE\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"correlationID\\\":\\\"string\\\
          \",\\\"value\\\":0,\\\"type\\\":\\\"DYNAMIC\\\",\\\"comment\\\":\\\"string\\\
          \",\\\"identifier\\\":\\\"string\\\",\\\"expiresIn\\\":0,\\\"customer\\\"\
          :{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\"\
          :\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"correlationID\\\":\\\"\
          string\\\",\\\"address\\\":{\\\"zipcode\\\":\\\"string\\\",\\\"street\\\"\
          :\\\"string\\\",\\\"number\\\":\\\"string\\\",\\\"neighborhood\\\":\\\"\
          string\\\",\\\"city\\\":\\\"string\\\",\\\"state\\\":\\\"string\\\",\\\"\
          complement\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\"}},\\\"daysForDueDate\\\
          \":0,\\\"daysAfterDueDate\\\":0,\\\"interests\\\":{\\\"value\\\":0},\\\"\
          fines\\\":{\\\"value\\\":0},\\\"additionalInfo\\\":[{\\\"key\\\":\\\"string\\\
          \",\\\"value\\\":\\\"string\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres,\
          \ _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _\
          \ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"correlationID\":\"string\",\"value\":0,\"type\":\"DYNAMIC\",\"comment\":\"string\",\"identifier\":\"string\",\"expiresIn\":0,\"customer\":{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\",\"correlationID\":\"string\",\"address\":{\"zipcode\":\"string\",\"street\":\"string\",\"number\":\"string\",\"neighborhood\":\"string\",\"city\":\"string\",\"state\":\"string\",\"complement\":\"string\",\"country\":\"string\"}},\"daysForDueDate\":0,\"daysAfterDueDate\":0,\"interests\":{\"value\":0},\"fines\":{\"value\":0},\"additionalInfo\":[{\"key\":\"string\",\"value\":\"string\"}]}");
          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/charge?return_existing=SOME_BOOLEAN_VALUE")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/charge?return_existing=SOME_BOOLEAN_VALUE")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["content-type"] = 'application/json'
          request["Authorization"] = 'REPLACE_KEY_VALUE'
          request.body = "{\"correlationID\":\"string\",\"value\":0,\"type\":\"DYNAMIC\",\"comment\":\"string\",\"identifier\":\"string\",\"expiresIn\":0,\"customer\":{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\",\"correlationID\":\"string\",\"address\":{\"zipcode\":\"string\",\"street\":\"string\",\"number\":\"string\",\"neighborhood\":\"string\",\"city\":\"string\",\"state\":\"string\",\"complement\":\"string\",\"country\":\"string\"}},\"daysForDueDate\":0,\"daysAfterDueDate\":0,\"interests\":{\"value\":0},\"fines\":{\"value\":0},\"additionalInfo\":[{\"key\":\"string\",\"value\":\"string\"}]}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /api/v1/charge/{id}/refund:
    get:
      description: Endpoint to get all refunds of a charge
      parameters:
      - description: "The correlation ID of the charge. You will need URI encoding\
          \ if your correlation ID has characters outside the ASCII set or reserved\
          \ characters (%, \\#, /)."
        examples:
          uuid:
            value: cf4012c9-b2ac-484d-8121-deedd1c6d8af
          random-string:
            value: fe7834b4060c488a9b0f89811be5f5cf
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_charge__id__refund_get_200_response'
          description: A list of refunds
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get all refunds of a charge
      tags:
      - charge refund
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/charge/%7Bid%7D/refund",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/charge/%7Bid%7D/refund \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/charge/%7Bid%7D/refund",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/charge/%7Bid%7D/refund", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/charge/%7Bid%7D/refund\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/charge/%7Bid%7D/refund")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/charge/%7Bid%7D/refund")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Endpoint to create a new refund for a charge
      parameters:
      - description: "The correlation ID of the charge. You will need URI encoding\
          \ if your correlation ID has characters outside the ASCII set or reserved\
          \ characters (%, \\#, /)."
        examples:
          uuid:
            value: cf4012c9-b2ac-484d-8121-deedd1c6d8af
          random-string:
            value: fe7834b4060c488a9b0f89811be5f5cf
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              correlationID: a273e72c-9547-4c75-a213-3b0a2735b8d5
              value: 100
              comment: Comentário do reembolso
            schema:
              $ref: '#/components/schemas/ChargeRefundPayload'
        description: Data to create a new refund for a charge
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_charge__id__refund_post_200_response'
          description: The created Refund
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Create a new refund for a charge
      tags:
      - charge refund
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/charge/%7Bid%7D/refund",
            "headers": {
              "content-type": "application/json",
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({correlationID: 'string', value: 0, comment: 'string'}));
          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://api.woovi.com/api/v1/charge/%7Bid%7D/refund \
            --header 'Authorization: REPLACE_KEY_VALUE' \
            --header 'content-type: application/json' \
            --data '{"correlationID":"string","value":0,"comment":"string"}'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/charge/%7Bid%7D/refund",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "{\"correlationID\":\"string\",\"value\":0,\"comment\":\"string\"}",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE",
              "content-type: application/json"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          payload = "{\"correlationID\":\"string\",\"value\":0,\"comment\":\"string\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "REPLACE_KEY_VALUE"
              }

          conn.request("POST", "/api/v1/charge/%7Bid%7D/refund", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/charge/%7Bid%7D/refund\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"correlationID\\\":\\\"string\\\
          \",\\\"value\\\":0,\\\"comment\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres,\
          \ _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _\
          \ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"correlationID\":\"string\",\"value\":0,\"comment\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/charge/%7Bid%7D/refund")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/charge/%7Bid%7D/refund")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["content-type"] = 'application/json'
          request["Authorization"] = 'REPLACE_KEY_VALUE'
          request.body = "{\"correlationID\":\"string\",\"value\":0,\"comment\":\"string\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /api/v1/customer/{id}:
    get:
      parameters:
      - description: correlation ID
        examples:
          correlationID:
            value: fe7834b4060c488a9b0f89811be5f5cf
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_customer__id__get_200_response'
          description: The customer retrieve using the given ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get one customer
      tags:
      - customer
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/customer/%7Bid%7D",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/customer/%7Bid%7D \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/customer/%7Bid%7D",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/customer/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/customer/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/customer/%7Bid%7D")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/customer/%7Bid%7D")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /api/v1/customer:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_customer_get_200_response'
          description: A list of customers
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get a list of customers
      tags:
      - customer
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/customer",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/customer \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/customer",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/customer", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/customer\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/customer")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/customer")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Endpoint to create a new Customer
      requestBody:
        content:
          application/json:
            example:
              name: Dan
              taxID: "31324227036"
              email: email0@example.com
              phone: "5511999999999"
              correlationID: 9134e286-6f71-427a-bf00-241681624586
            schema:
              $ref: '#/components/schemas/CustomerPayload'
        description: Data to create a new customer
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_customer_post_200_response'
          description: Customer ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Create a new Customer
      tags:
      - customer
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/customer",
            "headers": {
              "content-type": "application/json",
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            name: 'string',
            email: 'string',
            phone: 'string',
            taxID: 'string',
            correlationID: 'string',
            address: {
              zipcode: 'string',
              street: 'string',
              number: 'string',
              neighborhood: 'string',
              city: 'string',
              state: 'string',
              complement: 'string',
              country: 'string'
            }
          }));
          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://api.woovi.com/api/v1/customer \
            --header 'Authorization: REPLACE_KEY_VALUE' \
            --header 'content-type: application/json' \
            --data '{"name":"string","email":"string","phone":"string","taxID":"string","correlationID":"string","address":{"zipcode":"string","street":"string","number":"string","neighborhood":"string","city":"string","state":"string","complement":"string","country":"string"}}'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/customer",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\",\"correlationID\":\"string\",\"address\":{\"zipcode\":\"string\",\"street\":\"string\",\"number\":\"string\",\"neighborhood\":\"string\",\"city\":\"string\",\"state\":\"string\",\"complement\":\"string\",\"country\":\"string\"}}",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE",
              "content-type: application/json"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          payload = "{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\",\"correlationID\":\"string\",\"address\":{\"zipcode\":\"string\",\"street\":\"string\",\"number\":\"string\",\"neighborhood\":\"string\",\"city\":\"string\",\"state\":\"string\",\"complement\":\"string\",\"country\":\"string\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "REPLACE_KEY_VALUE"
              }

          conn.request("POST", "/api/v1/customer", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/customer\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"email\\\
          \":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\
          \",\\\"correlationID\\\":\\\"string\\\",\\\"address\\\":{\\\"zipcode\\\"\
          :\\\"string\\\",\\\"street\\\":\\\"string\\\",\\\"number\\\":\\\"string\\\
          \",\\\"neighborhood\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"\
          state\\\":\\\"string\\\",\\\"complement\\\":\\\"string\\\",\\\"country\\\
          \":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\",\"correlationID\":\"string\",\"address\":{\"zipcode\":\"string\",\"street\":\"string\",\"number\":\"string\",\"neighborhood\":\"string\",\"city\":\"string\",\"state\":\"string\",\"complement\":\"string\",\"country\":\"string\"}}");
          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/customer")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/customer")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["content-type"] = 'application/json'
          request["Authorization"] = 'REPLACE_KEY_VALUE'
          request.body = "{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\",\"correlationID\":\"string\",\"address\":{\"zipcode\":\"string\",\"street\":\"string\",\"number\":\"string\",\"neighborhood\":\"string\",\"city\":\"string\",\"state\":\"string\",\"complement\":\"string\",\"country\":\"string\"}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /api/v1/partner/application:
    post:
      description: |
        As a partner company, you can create a new application to some of your companies.
        The application should give access to our API to this companies, so they can use
        it too.
      requestBody:
        content:
          application/json:
            example:
              application:
                name: MyAPIAccess
                type: API
              taxID:
                taxID: "65914571000187"
                type: BR:CNPJ
            schema:
              $ref: '#/components/schemas/_api_v1_partner_application_post_request'
        description: The request body to create a pre registration.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_partner_application_post_200_response'
          description: |
            Our "idempotence output", if you get this HTTP code, it's an application
            that already has been registered.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_partner_application_post_200_response'
          description: |
            A new application has been registered. It'll be identified by the name that you give to it
            and by the company that has been referenced.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: You are unauthorized to use this endpoint.
      summary: Create a new application to some of your preregistration's company.
      tags:
      - partner (request access)
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/partner/application",
            "headers": {
              "content-type": "application/json",
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            application: {name: 'string', type: 'API'},
            taxID: {taxID: 'string', type: 'BR:CNPJ'}
          }));
          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://api.woovi.com/api/v1/partner/application \
            --header 'Authorization: REPLACE_KEY_VALUE' \
            --header 'content-type: application/json' \
            --data '{"application":{"name":"string","type":"API"},"taxID":{"taxID":"string","type":"BR:CNPJ"}}'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/partner/application",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "{\"application\":{\"name\":\"string\",\"type\":\"API\"},\"taxID\":{\"taxID\":\"string\",\"type\":\"BR:CNPJ\"}}",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE",
              "content-type: application/json"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          payload = "{\"application\":{\"name\":\"string\",\"type\":\"API\"},\"taxID\":{\"taxID\":\"string\",\"type\":\"BR:CNPJ\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "REPLACE_KEY_VALUE"
              }

          conn.request("POST", "/api/v1/partner/application", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/partner/application\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"application\\\":{\\\"name\\\"\
          :\\\"string\\\",\\\"type\\\":\\\"API\\\"},\\\"taxID\\\":{\\\"taxID\\\":\\\
          \"string\\\",\\\"type\\\":\\\"BR:CNPJ\\\"}}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres,\
          \ _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _\
          \ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"application\":{\"name\":\"string\",\"type\":\"API\"},\"taxID\":{\"taxID\":\"string\",\"type\":\"BR:CNPJ\"}}");
          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/partner/application")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/partner/application")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["content-type"] = 'application/json'
          request["Authorization"] = 'REPLACE_KEY_VALUE'
          request.body = "{\"application\":{\"name\":\"string\",\"type\":\"API\"},\"taxID\":{\"taxID\":\"string\",\"type\":\"BR:CNPJ\"}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /api/v1/partner/company/{taxID}:
    get:
      parameters:
      - description: The raw tax ID from the preregistration that you want to get.
        examples:
          taxID:
            value: "60151449000182"
        explode: false
        in: path
        name: taxID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_partner_company__taxID__get_200_response'
          description: The preregistration retrieved by the tax ID.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get an specific preregistration via taxID param.
      tags:
      - partner (request access)
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/partner/company/%7BtaxID%7D",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/partner/company/%7BtaxID%7D \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/partner/company/%7BtaxID%7D",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/partner/company/%7BtaxID%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/partner/company/%7BtaxID%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/partner/company/%7BtaxID%7D")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/partner/company/%7BtaxID%7D")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /api/v1/partner/company:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_partner_company_get_200_response'
          description: A list with preregistrations.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get every preregistration that is managed by you.
      tags:
      - partner (request access)
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/partner/company",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/partner/company \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/partner/company",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/partner/company", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/partner/company\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/partner/company")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/partner/company")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: |
        As a partner company, you can create a new pre registration referencing your
        company as a partner.
      requestBody:
        content:
          application/json:
            example:
              preRegistration:
                name: Example LLC
                taxID:
                  taxID: "11111111111111"
                  type: BR:CNPJ
                website: examplellc.com
              user:
                firstName: John
                lastName: Doe
                email: johndoe@examplellc.com
                phone: +5511912345678
            schema:
              $ref: '#/components/schemas/PreRegistrationPayloadObject'
        description: The request body to create a pre registration.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreRegistrationPayloadObject'
          description: |
            Payload with a pre registration data.
            Being the taxID our idempotence key, if you do the request with the same taxID multiple times,
            every time you'll receive the same data from our endpoint.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreRegistrationPayloadObject'
          description: A new preregistration that is related to you has been created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: You are unauthorized to use this endpoint.
      summary: Create a pre registration with a partner reference (your company)
      tags:
      - partner (request access)
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/partner/company",
            "headers": {
              "content-type": "application/json",
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            preRegistration: {name: 'string', website: 'string', taxID: {taxID: 'string', type: 'BR:CNPJ'}},
            user: {firstName: 'string', lastName: 'string', email: 'string', phone: 'string'}
          }));
          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://api.woovi.com/api/v1/partner/company \
            --header 'Authorization: REPLACE_KEY_VALUE' \
            --header 'content-type: application/json' \
            --data '{"preRegistration":{"name":"string","website":"string","taxID":{"taxID":"string","type":"BR:CNPJ"}},"user":{"firstName":"string","lastName":"string","email":"string","phone":"string"}}'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/partner/company",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "{\"preRegistration\":{\"name\":\"string\",\"website\":\"string\",\"taxID\":{\"taxID\":\"string\",\"type\":\"BR:CNPJ\"}},\"user\":{\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"phone\":\"string\"}}",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE",
              "content-type: application/json"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          payload = "{\"preRegistration\":{\"name\":\"string\",\"website\":\"string\",\"taxID\":{\"taxID\":\"string\",\"type\":\"BR:CNPJ\"}},\"user\":{\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"phone\":\"string\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "REPLACE_KEY_VALUE"
              }

          conn.request("POST", "/api/v1/partner/company", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/partner/company\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"preRegistration\\\":{\\\"name\\\
          \":\\\"string\\\",\\\"website\\\":\\\"string\\\",\\\"taxID\\\":{\\\"taxID\\\
          \":\\\"string\\\",\\\"type\\\":\\\"BR:CNPJ\\\"}},\\\"user\\\":{\\\"firstName\\\
          \":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\
          \",\\\"phone\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\"\
          , url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres,\
          \ _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _\
          \ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"preRegistration\":{\"name\":\"string\",\"website\":\"string\",\"taxID\":{\"taxID\":\"string\",\"type\":\"BR:CNPJ\"}},\"user\":{\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"phone\":\"string\"}}");
          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/partner/company")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/partner/company")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["content-type"] = 'application/json'
          request["Authorization"] = 'REPLACE_KEY_VALUE'
          request.body = "{\"preRegistration\":{\"name\":\"string\",\"website\":\"string\",\"taxID\":{\"taxID\":\"string\",\"type\":\"BR:CNPJ\"}},\"user\":{\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"phone\":\"string\"}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /api/v1/payment/{id}:
    get:
      parameters:
      - description: payment ID or correlation ID
        examples:
          paymentID:
            value: Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA==
          correlationID:
            value: fe7834b4060c488a9b0f89811be5f5cf
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_payment__id__get_200_response'
          description: The payment retrieved using the given ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get one Payment
      tags:
      - payment (request access)
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/payment/%7Bid%7D",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/payment/%7Bid%7D \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/payment/%7Bid%7D",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/payment/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/payment/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/payment/%7Bid%7D")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/payment/%7Bid%7D")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /api/v1/payment:
    get:
      responses:
        "200":
          content:
            application/json:
              example:
                pageInfo:
                  skip: 0
                  limit: 10
                  totalCount: 20
                  hasPreviousPage: false
                  hasNextPage: true
                payments:
                  payment:
                    value: 100
                    status: CONFIRMED
                    destinationAlias: c4249323-b4ca-43f2-8139-8232aab09b93
                    comment: payment comment
                    correlationID: payment1
                    sourceAccountId: my-source-account-id
                  transaction:
                    value: 100
                    endToEndId: transaction-end-to-end-id
                    time: 2023-03-20T13:14:17.000Z
              schema:
                $ref: '#/components/schemas/_api_v1_payment_get_200_response'
          description: A list of payments
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get a list of payments
      tags:
      - payment (request access)
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/payment",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/payment \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/payment",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/payment", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/payment\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/payment")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/payment")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Endpoint to request a payment
      requestBody:
        content:
          application/json:
            example:
              value: 100
              destinationAlias: c4249323-b4ca-43f2-8139-8232aab09b93
              comment: payment comment
              correlationID: payment1
              sourceAccountId: my-source-account-id
            schema:
              $ref: '#/components/schemas/PaymentCreatePayload'
        description: Data to create a payment request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_payment_post_200_response'
          description: Payment destination account information
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Create a Payment Request
      tags:
      - payment (request access)
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/payment",
            "headers": {
              "content-type": "application/json",
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            value: 0,
            destinationAlias: 'string',
            correlationID: 'string',
            comment: 'string',
            sourceAccountId: 'string'
          }));
          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://api.woovi.com/api/v1/payment \
            --header 'Authorization: REPLACE_KEY_VALUE' \
            --header 'content-type: application/json' \
            --data '{"value":0,"destinationAlias":"string","correlationID":"string","comment":"string","sourceAccountId":"string"}'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/payment",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "{\"value\":0,\"destinationAlias\":\"string\",\"correlationID\":\"string\",\"comment\":\"string\",\"sourceAccountId\":\"string\"}",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE",
              "content-type: application/json"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          payload = "{\"value\":0,\"destinationAlias\":\"string\",\"correlationID\":\"string\",\"comment\":\"string\",\"sourceAccountId\":\"string\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "REPLACE_KEY_VALUE"
              }

          conn.request("POST", "/api/v1/payment", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/payment\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"value\\\":0,\\\"destinationAlias\\\
          \":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\",\\\"comment\\\":\\\
          \"string\\\",\\\"sourceAccountId\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres,\
          \ _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _\
          \ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"value\":0,\"destinationAlias\":\"string\",\"correlationID\":\"string\",\"comment\":\"string\",\"sourceAccountId\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/payment")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/payment")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["content-type"] = 'application/json'
          request["Authorization"] = 'REPLACE_KEY_VALUE'
          request.body = "{\"value\":0,\"destinationAlias\":\"string\",\"correlationID\":\"string\",\"comment\":\"string\",\"sourceAccountId\":\"string\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /api/v1/pixQrCode-static/{id}:
    get:
      parameters:
      - description: "pixQrCode ID, correlation ID or emv identifier"
        examples:
          pixQrCodeId:
            value: Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA==
          correlationID:
            value: fe7834b4060c488a9b0f89811be5f5cf
          identifier:
            value: zr7833b4060c488a9b0f89811
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_pixQrCode_static__id__get_200_response'
          description: The pixQrCode retrieve using the given ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get one Pix QrCode
      tags:
      - pixQrCode
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/pixQrCode-static/%7Bid%7D",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/pixQrCode-static/%7Bid%7D \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/pixQrCode-static/%7Bid%7D",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/pixQrCode-static/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/pixQrCode-static/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/pixQrCode-static/%7Bid%7D")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/pixQrCode-static/%7Bid%7D")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /api/v1/qrcode-static:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_qrcode_static_get_200_response'
          description: A list of pixQrCodes
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get a list of Pix QrCodes
      tags:
      - pixQrCode
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/qrcode-static",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/qrcode-static \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/qrcode-static",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/qrcode-static", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/qrcode-static\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/qrcode-static")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/qrcode-static")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Endpoint to create a new Pix QrCode Static
      requestBody:
        content:
          application/json:
            example:
              correlationID: 9134e286-6f71-427a-bf00-241681624586
              value: 100
              comment: good
              identifier: zr7833b4060c488a9b0f89811
            schema:
              $ref: '#/components/schemas/PixQrCodePayload'
        description: Data to create a new Pix QrCode Static
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_qrcode_static_post_200_response'
          description: PixQrCode ID and also the generated Dynamic BR Code to be rendered
            as a QRCode
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Create a new Pix QrCode Static
      tags:
      - pixQrCode
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/qrcode-static",
            "headers": {
              "content-type": "application/json",
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            name: 'string',
            correlationID: 'string',
            value: 0,
            comment: 'string',
            identifier: 'string'
          }));
          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://api.woovi.com/api/v1/qrcode-static \
            --header 'Authorization: REPLACE_KEY_VALUE' \
            --header 'content-type: application/json' \
            --data '{"name":"string","correlationID":"string","value":0,"comment":"string","identifier":"string"}'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/qrcode-static",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "{\"name\":\"string\",\"correlationID\":\"string\",\"value\":0,\"comment\":\"string\",\"identifier\":\"string\"}",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE",
              "content-type: application/json"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          payload = "{\"name\":\"string\",\"correlationID\":\"string\",\"value\":0,\"comment\":\"string\",\"identifier\":\"string\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "REPLACE_KEY_VALUE"
              }

          conn.request("POST", "/api/v1/qrcode-static", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/qrcode-static\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"correlationID\\\
          \":\\\"string\\\",\\\"value\\\":0,\\\"comment\\\":\\\"string\\\",\\\"identifier\\\
          \":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"string\",\"correlationID\":\"string\",\"value\":0,\"comment\":\"string\",\"identifier\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/qrcode-static")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/qrcode-static")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["content-type"] = 'application/json'
          request["Authorization"] = 'REPLACE_KEY_VALUE'
          request.body = "{\"name\":\"string\",\"correlationID\":\"string\",\"value\":0,\"comment\":\"string\",\"identifier\":\"string\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /api/v1/refund/{id}:
    get:
      parameters:
      - description: refund ID or correlation ID
        examples:
          id:
            value: Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA==
          correlationID:
            value: fe7834b4060c488a9b0f89811be5f5cf
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_refund__id__get_200_response'
          description: The refund retrieve using the given ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get one refund
      tags:
      - refund
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/refund/%7Bid%7D",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/refund/%7Bid%7D \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/refund/%7Bid%7D",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/refund/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/refund/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/refund/%7Bid%7D")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/refund/%7Bid%7D")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /api/v1/refund:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_refund_get_200_response'
          description: A list of refunds
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get a list of refunds
      tags:
      - refund
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/refund",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/refund \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/refund",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/refund", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/refund\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/refund")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/refund")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      description: Endpoint to create a new refund for a customer
      requestBody:
        content:
          application/json:
            example:
              transactionEndToEndId: 9134e286-6f71-427a-bf00-241681624586
              correlationID: 9134e286-6f71-427a-bf00-241681624586
              value: 100
              comment: Comentário do reembolso
            schema:
              $ref: '#/components/schemas/RefundPayload'
        description: Data to create a new refund
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_refund_post_200_response'
          description: The created Refund
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Create a new refund
      tags:
      - refund
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/refund",
            "headers": {
              "content-type": "application/json",
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            value: 0,
            transactionEndToEndId: 'string',
            correlationID: 'string',
            comment: 'string'
          }));
          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://api.woovi.com/api/v1/refund \
            --header 'Authorization: REPLACE_KEY_VALUE' \
            --header 'content-type: application/json' \
            --data '{"value":0,"transactionEndToEndId":"string","correlationID":"string","comment":"string"}'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/refund",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "{\"value\":0,\"transactionEndToEndId\":\"string\",\"correlationID\":\"string\",\"comment\":\"string\"}",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE",
              "content-type: application/json"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          payload = "{\"value\":0,\"transactionEndToEndId\":\"string\",\"correlationID\":\"string\",\"comment\":\"string\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "REPLACE_KEY_VALUE"
              }

          conn.request("POST", "/api/v1/refund", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/refund\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"value\\\":0,\\\"transactionEndToEndId\\\
          \":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\",\\\"comment\\\":\\\
          \"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"value\":0,\"transactionEndToEndId\":\"string\",\"correlationID\":\"string\",\"comment\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/refund")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/refund")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["content-type"] = 'application/json'
          request["Authorization"] = 'REPLACE_KEY_VALUE'
          request.body = "{\"value\":0,\"transactionEndToEndId\":\"string\",\"correlationID\":\"string\",\"comment\":\"string\"}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /api/v1/subscriptions/{id}:
    get:
      parameters:
      - description: The globalID of the subscription.
        example: UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_subscriptions__id__get_200_response'
          description: The subscription retrieved using the given ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get one subscription
      tags:
      - subscription
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM= \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /api/v1/subscriptions:
    post:
      description: Endpoint to create a new Subcription
      requestBody:
        content:
          application/json:
            example:
              value: 100
              customer:
                name: Dan
                taxID: "31324227036"
                email: email0@example.com
                phone: "5511999999999"
              dayGenerateCharge: 15
            schema:
              $ref: '#/components/schemas/SubscriptionPayload'
        description: Data to create a new Subscription
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_subscriptions__id__get_200_response'
          description: The subscription created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Create a new Subscription
      tags:
      - subscription
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/subscriptions",
            "headers": {
              "content-type": "application/json",
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            customer: {name: 'string', email: 'string', phone: 'string', taxID: 'string'},
            value: 0,
            dayGenerateCharge: 5
          }));
          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://api.woovi.com/api/v1/subscriptions \
            --header 'Authorization: REPLACE_KEY_VALUE' \
            --header 'content-type: application/json' \
            --data '{"customer":{"name":"string","email":"string","phone":"string","taxID":"string"},"value":0,"dayGenerateCharge":5}'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/subscriptions",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "{\"customer\":{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\"},\"value\":0,\"dayGenerateCharge\":5}",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE",
              "content-type: application/json"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          payload = "{\"customer\":{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\"},\"value\":0,\"dayGenerateCharge\":5}"

          headers = {
              'content-type': "application/json",
              'Authorization': "REPLACE_KEY_VALUE"
              }

          conn.request("POST", "/api/v1/subscriptions", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/subscriptions\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"customer\\\":{\\\"name\\\":\\\"\
          string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"\
          taxID\\\":\\\"string\\\"},\\\"value\\\":0,\\\"dayGenerateCharge\\\":5}\"\
          )\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\t\
          defer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"customer\":{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\"},\"value\":0,\"dayGenerateCharge\":5}");
          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/subscriptions")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/subscriptions")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["content-type"] = 'application/json'
          request["Authorization"] = 'REPLACE_KEY_VALUE'
          request.body = "{\"customer\":{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\"},\"value\":0,\"dayGenerateCharge\":5}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /api/v1/transaction/{id}:
    get:
      parameters:
      - description: you can use the transaction id from openpix or the endToEndId
          of transaction from bank
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                transaction:
                  customer:
                    name: Dan
                    email: email0@example.com
                    phone: "5511999999999"
                    taxID:
                      taxID: "31324227036"
                      type: BR:CPF
                    correlationID: 9134e286-6f71-427a-bf00-241681624586
                  payer:
                    name: Dan
                    email: email0@example.com
                    phone: "5511999999999"
                    taxID:
                      taxID: "31324227036"
                      type: BR:CPF
                    correlationID: 9134e286-6f71-427a-bf00-241681624586
                  charge:
                    status: ACTIVE
                    customer: 603f81fcc6bccc24326ffb43
                    correlationID: 9134e286-6f71-427a-bf00-241681624586
                    createdAt: 2021-03-03T12:33:00.546Z
                    updatedAt: 2021-03-03T12:33:00.546Z
                  withdraw:
                    value: 100
                    time: 2021-03-03T12:33:00.536Z
                    infoPagador: payer info 1
                    endToEndId: E18236120202012032010s01345689XBY
                    createdAt: 2021-03-03T12:33:00.546Z
                  infoPagador: payer info 0
                  value: 100
                  time: 2021-03-03T12:33:00.536Z
                  transactionID: transactionID
                  type: PAYMENT
                  endToEndId: E18236120202012032010s0133872GZA
                  globalID: UGl4VHJhbnNhY3Rpb246NzE5MWYxYjAyMDQ2YmY1ZjUzZGNmYTBi
              schema:
                $ref: '#/components/schemas/_api_v1_transaction__id__get_200_response'
          description: The transaction retrieve using the given ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get a Transaction
      tags:
      - transactions
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/transaction/%7Bid%7D",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/transaction/%7Bid%7D \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/transaction/%7Bid%7D",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/transaction/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/transaction/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/transaction/%7Bid%7D")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/transaction/%7Bid%7D")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /api/v1/transaction:
    get:
      parameters:
      - explode: true
        in: query
        name: start
        required: false
        schema:
          $ref: '#/components/schemas/Start'
        style: form
      - explode: true
        in: query
        name: end
        required: false
        schema:
          $ref: '#/components/schemas/End'
        style: form
      - description: You can use the charge ID or correlation ID or transaction ID
          of charge to get a list of transactions related of this transaction
        example: Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA
        explode: true
        in: query
        name: charge
        required: false
        schema:
          type: string
        style: form
      - description: You can use the QrCode static ID or correlation ID or identifier
          field of QrCode static to get a list of QrCode related of this transaction
        example: Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA
        explode: true
        in: query
        name: pixQrCode
        required: false
        schema:
          type: string
        style: form
      - description: You can use the ID or EndToEndId of a withdrawal transaction
          to get all transactions related to the withdrawal
        example: Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA
        explode: true
        in: query
        name: withdrawal
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                pageInfo:
                  skip: 0
                  limit: 10
                  totalCount: 20
                  hasPreviousPage: false
                  hasNextPage: true
                transactions:
                  customer:
                    name: Dan
                    email: email0@example.com
                    phone: "5511999999999"
                    taxID:
                      taxID: "31324227036"
                      type: BR:CPF
                    correlationID: 9134e286-6f71-427a-bf00-241681624586
                  payer:
                    name: Dan
                    email: email0@example.com
                    phone: "5511999999999"
                    taxID:
                      taxID: "31324227036"
                      type: BR:CPF
                    correlationID: 9134e286-6f71-427a-bf00-241681624586
                  charge:
                    status: ACTIVE
                    customer: 603f81fcc6bccc24326ffb43
                    correlationID: 9134e286-6f71-427a-bf00-241681624586
                    createdAt: 2021-03-03T12:33:00.546Z
                    updatedAt: 2021-03-03T12:33:00.546Z
                  withdraw:
                    value: 100
                    time: 2021-03-03T12:33:00.536Z
                    infoPagador: payer info 1
                    endToEndId: E18236120202012032010s01345689XBY
                  type: PAYMENT
                  infoPagador: payer info 0
                  value: 100
                  time: 2021-03-03T12:33:00.536Z
                  transactionID: transactionID
                  endToEndId: E18236120202012032010s0133872GZA
              schema:
                $ref: '#/components/schemas/_api_v1_transaction_get_200_response'
          description: A list of transactions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get a list of transactions
      tags:
      - transactions
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/transaction",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://api.woovi.com/api/v1/transaction \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/transaction",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/transaction", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/transaction\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/transaction")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/transaction")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /api/v1/webhook/{id}:
    delete:
      description: Endpoint to delete a Webhook
      parameters:
      - description: webhook ID
        examples:
          webhookID:
            value: Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA==
          id:
            value: fe7834b4060c488a9b0f89811be5f5cf
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_webhook__id__delete_200_response'
          description: Webhook ID and also the status code
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_webhook__id__delete_400_response'
          description: An error message
      summary: Delete a Webhook
      tags:
      - webhook
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/webhook/%7Bid%7D",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://api.woovi.com/api/v1/webhook/%7Bid%7D \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/webhook/%7Bid%7D",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "DELETE",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("DELETE", "/api/v1/webhook/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/webhook/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/webhook/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/webhook/%7Bid%7D")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
  /api/v1/webhook:
    get:
      parameters:
      - description: You can use the url to filter all webhooks
        example: https://mycompany.com.br/webhook
        explode: true
        in: query
        name: url
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_webhook_get_200_response'
          description: A list of webhooks
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get a list of webhooks
      tags:
      - webhook
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/webhook?url=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://api.woovi.com/api/v1/webhook?url=SOME_STRING_VALUE' \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/webhook?url=SOME_STRING_VALUE",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/api/v1/webhook?url=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/webhook?url=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/webhook?url=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/webhook?url=SOME_STRING_VALUE")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
    post:
      callbacks:
        receivedPix:
          '{$request.body#/webhook.url}':
            post:
              description: |
                Pix - O callback vai ser acionado sempre que um Pix for recebido enviando uma charge e um pix
              operationId: receivedPix_Post
              requestBody:
                content:
                  application/json:
                    schema:
                      example:
                        charge:
                          status: COMPLETED
                          customer:
                            name: Julio
                            email: email0@example.com
                            phone: "5511999999999"
                            taxID:
                              taxID: "31928282008"
                              type: BR:CPF
                            correlationID: 9134e286-6f71-427a-bf00-241681624586
                          correlationID: 9134e286-6f71-427a-bf00-241681624586
                          transactionID: 9134e2866f71427abf00241681624586
                          brCode: 000201010212261060014br.gov.bcb.pix2584https://api.openpix.com.br/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao
                            Paulo62360532867ba5173c734202ac659721306b38c963044BCA
                          createdAt: 2021-03-03T20:49:23.605Z
                          updatedAt: 2021-03-03T20:49:23.668Z
                        pix:
                          pixQrCode: null
                          charge:
                            status: COMPLETED
                            customer: 604002035cce3b60132343cb
                            correlationID: 9134e286-6f71-427a-bf00-241681624586
                            brCode: 000201010212261060014br.gov.bcb.pix2584https://api.openpix.com.br/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao
                              Paulo62360532867ba5173c734202ac659721306b38c963044BCA
                            createdAt: 2021-03-03T21:39:15.831Z
                            updatedAt: 2021-03-03T21:39:15.896Z
                          customer:
                            name: Julio
                            email: email0@example.com
                            phone: "5511999999999"
                            taxID:
                              taxID: "31928282008"
                              type: BR:CPF
                            correlationID: 9134e286-6f71-427a-bf00-241681624586
                          payer:
                            name: Julio
                            email: email0@example.com
                            phone: "5511999999999"
                            taxID:
                              taxID: "31928282008"
                              type: BR:CPF
                            correlationID: 9134e286-6f71-427a-bf00-241681624586
                          time: 2020-09-09T20:15:00.358Z
                          value: 9999
                          transactionID: 9134e2866f71427abf00241681624586
                          infoPagador: conta
                          raw:
                            endToEndId: 9134e2866f71427abf00241681624586
                            txid: 9134e2866f71427abf00241681624586
                            valor: "99.99"
                            horario: 2020-09-09T20:15:00.358Z
                            infoPagador: conta
                        pixQrCode: null
                      properties:
                        charge:
                          $ref: '#/components/schemas/Charge'
                        pix:
                          properties:
                            pixQrCode:
                              $ref: '#/components/schemas/PixQrCode'
                            charge:
                              $ref: '#/components/schemas/Charge'
                            customer:
                              $ref: '#/components/schemas/Customer'
                            payer:
                              $ref: '#/components/schemas/Customer'
                            time:
                              type: string
                            value:
                              type: string
                            transactionID:
                              type: string
                            infoPagador:
                              type: string
                            raw:
                              properties:
                                endToEndId:
                                  type: string
                                txid:
                                  type: string
                                valor:
                                  type: string
                                horario:
                                  type: string
                                infoPagador:
                                  type: string
                              type: object
                          type: object
                        pixQrCode:
                          type: object
                      type: object
              responses:
                "200":
                  description: Notificação recebida com sucesso
              x-callback-request: true
        receivedPixDetached:
          '{$request.body#/webhook.url}':
            post:
              description: |
                Pix Avulso - O callback vai ser acionado sempre que um Pix for recebido devolvendo um pix avulso
              operationId: receivedPixDetached_Post
              requestBody:
                content:
                  application/json:
                    schema:
                      example:
                        charge: null
                        pix:
                          pixQrCode: null
                          charge: null
                          customer: null
                          time: 2020-09-09T20:15:00.358Z
                          value: 9999
                          transactionID: 9134e2866f71427abf00241681624586
                          infoPagador: conta
                          raw:
                            endToEndId: 9134e2866f71427abf00241681624586
                            txid: 9134e2866f71427abf00241681624586
                            valor: "99.99"
                            horario: 2020-09-09T20:15:00.358Z
                            infoPagador: conta
                      properties:
                        charge:
                          type: object
                        pix:
                          properties:
                            pixQrCode:
                              $ref: '#/components/schemas/PixQrCode'
                            charge:
                              $ref: '#/components/schemas/Charge'
                            customer:
                              $ref: '#/components/schemas/Customer'
                            payer:
                              $ref: '#/components/schemas/Customer'
                            time:
                              type: string
                            value:
                              type: string
                            transactionID:
                              type: string
                            infoPagador:
                              type: string
                            raw:
                              properties:
                                endToEndId:
                                  type: string
                                txid:
                                  type: string
                                valor:
                                  type: string
                                horario:
                                  type: string
                                infoPagador:
                                  type: string
                              type: object
                          type: object
                        pixQrCode:
                          type: object
                      type: object
              responses:
                "200":
                  description: Notificação recebida com sucesso
              x-callback-request: true
        receivedPixQrCode:
          '{$request.body#/webhook.url}':
            post:
              description: |
                Pix QrCode - O callback vai ser acionado sempre que um Pix QrCOde for recebido devolvendo um pix e um pixQrCode
              operationId: receivedPixQrCode_Post
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/_api_v1_webhook_post_request'
              responses:
                "200":
                  description: Notificação recebida com sucesso
              x-callback-request: true
      description: Endpoint to create a new Webhook
      requestBody:
        content:
          application/json:
            schema:
              example:
                webhook:
                  name: webhookName
                  event: OPENPIX:CHARGE_CREATED
                  url: https://mycompany.com.br/webhook
                  authorization: openpix
                  isActive: true
              properties:
                webhook:
                  $ref: '#/components/schemas/WebhookPayload'
              type: object
        description: Data to create a new webhook
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  webhook:
                    id: V2ViaG9vazo2MDNlYmUxZWRlYjkzNWU4NmQyMmNmMTg=
                    name: webhookName
                    url: https://mycompany.com.br/webhook
                    authorization: openpix
                    isActive: true
                    event: OPENPIX:TRANSACTION_RECEIVED
                    createdAt: 2021-03-02T22:29:10.720Z
                    updatedAt: 2021-03-02T22:29:10.720Z
                properties:
                  webhook:
                    $ref: '#/components/schemas/Webhook'
                type: object
          description: Webhook created specific event when receives a new pix transaction
        "400":
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                type: object
          description: An error message
      summary: Create a new Webhook
      tags:
      - webhook
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/api/v1/webhook",
            "headers": {
              "content-type": "application/json",
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            webhook: {
              name: 'webhookName',
              event: 'OPENPIX:CHARGE_CREATED',
              url: 'https://mycompany.com.br/webhook',
              authorization: 'openpix',
              isActive: true
            }
          }));
          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://api.woovi.com/api/v1/webhook \
            --header 'Authorization: REPLACE_KEY_VALUE' \
            --header 'content-type: application/json' \
            --data '{"webhook":{"name":"webhookName","event":"OPENPIX:CHARGE_CREATED","url":"https://mycompany.com.br/webhook","authorization":"openpix","isActive":true}}'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/api/v1/webhook",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "{\"webhook\":{\"name\":\"webhookName\",\"event\":\"OPENPIX:CHARGE_CREATED\",\"url\":\"https://mycompany.com.br/webhook\",\"authorization\":\"openpix\",\"isActive\":true}}",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE",
              "content-type: application/json"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          payload = "{\"webhook\":{\"name\":\"webhookName\",\"event\":\"OPENPIX:CHARGE_CREATED\",\"url\":\"https://mycompany.com.br/webhook\",\"authorization\":\"openpix\",\"isActive\":true}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "REPLACE_KEY_VALUE"
              }

          conn.request("POST", "/api/v1/webhook", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/api/v1/webhook\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"webhook\\\":{\\\"name\\\":\\\"\
          webhookName\\\",\\\"event\\\":\\\"OPENPIX:CHARGE_CREATED\\\",\\\"url\\\"\
          :\\\"https://mycompany.com.br/webhook\\\",\\\"authorization\\\":\\\"openpix\\\
          \",\\\"isActive\\\":true}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url,\
          \ payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\
          \treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ :=\
          \ http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\
          \n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"webhook\":{\"name\":\"webhookName\",\"event\":\"OPENPIX:CHARGE_CREATED\",\"url\":\"https://mycompany.com.br/webhook\",\"authorization\":\"openpix\",\"isActive\":true}}");
          Request request = new Request.Builder()
            .url("https://api.woovi.com/api/v1/webhook")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/api/v1/webhook")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["content-type"] = 'application/json'
          request["Authorization"] = 'REPLACE_KEY_VALUE'
          request.body = "{\"webhook\":{\"name\":\"webhookName\",\"event\":\"OPENPIX:CHARGE_CREATED\",\"url\":\"https://mycompany.com.br/webhook\",\"authorization\":\"openpix\",\"isActive\":true}}"

          response = http.request(request)
          puts response.read_body
      x-content-type: application/json
      x-accepts: application/json
  /openpix/charge/brcode/image/{id}.png?size=1024:
    get:
      parameters:
      - description: charge link payment ID
        examples:
          paymentLinkID:
            value: fe7834b4060c488a9b0f89811be5f5cf
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: "Size for the image. This size should be between 600 and 4096.\
          \ if the size parameter was not passed, the default value will be 1024."
        examples:
          size:
            value: 768
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: The Qr Code image as MIME type
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_v1_account__accountId__get_400_response'
          description: An error message
      summary: Get an image of Qr Code from a Charge
      tags:
      - charge
      x-codeSamples:
      - lang: Node + Native
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.woovi.com",
            "port": null,
            "path": "/openpix/charge/brcode/image/%7B:id%7D.png?size=1024",
            "headers": {
              "Authorization": "REPLACE_KEY_VALUE"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://api.woovi.com/openpix/charge/brcode/image/%7B:id%7D.png?size=1024' \
            --header 'Authorization: REPLACE_KEY_VALUE'
      - lang: Php + Curl
        source: |-
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, [
            CURLOPT_URL => "https://api.woovi.com/openpix/charge/brcode/image/%7B:id%7D.png?size=1024",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
              "Authorization: REPLACE_KEY_VALUE"
            ],
          ]);

          $response = curl_exec($curl);
          $err = curl_error($curl);

          curl_close($curl);

          if ($err) {
            echo "cURL Error #:" . $err;
          } else {
            echo $response;
          }
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.woovi.com")

          headers = { 'Authorization': "REPLACE_KEY_VALUE" }

          conn.request("GET", "/openpix/charge/brcode/image/%7B:id%7D.png?size=1024", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.woovi.com/openpix/charge/brcode/image/%7B:id%7D.png?size=1024\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Java + Okhttp
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.woovi.com/openpix/charge/brcode/image/%7B:id%7D.png?size=1024")
            .get()
            .addHeader("Authorization", "REPLACE_KEY_VALUE")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI("https://api.woovi.com/openpix/charge/brcode/image/%7B:id%7D.png?size=1024")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'REPLACE_KEY_VALUE'

          response = http.request(request)
          puts response.read_body
      x-accepts: application/json
components:
  schemas:
    CompanyBankAccount:
      example:
        accountId: accountId
        isDefault: true
        balance:
          total: 0.8008281904610115
          blocked: 6.027456183070403
          available: 1.4658129805029452
      properties:
        accountId:
          description: ID of the Account
          type: string
        isDefault:
          type: boolean
        balance:
          $ref: '#/components/schemas/CompanyBankAccount_balance'
      type: object
    WithdrawTransaction:
      example:
        endToEndId: endToEndId
        value: value
      properties:
        endToEndId:
          description: ID of the Withdraw Transaction
          type: string
        value:
          type: string
      type: object
    Charge:
      example:
        identifier: identifier
        paymentLinkID: paymentLinkID
        globalID: ""
        type: DYNAMIC
        transactionID: ""
        expiresIn: expiresIn
        createdAt: createdAt
        additionalInfo:
        - value: value
          key: key
        - value: value
          key: key
        comment: comment
        correlationID: correlationID
        paymentLinkUrl: ""
        brCode: brCode
        value: 0.8008281904610115
        qrCodeImage: ""
        pixKey: pixKey
        customer:
          address:
            zipcode: zipcode
            number: number
            country: country
            city: city
            street: street
            neighborhood: neighborhood
            state: state
            complement: complement
          phone: phone
          taxID:
            taxID: taxID
            type: type
          name: name
          correlationID: correlationID
          email: email
        status: ACTIVE
        updatedAt: updatedAt
      properties:
        value:
          type: number
        customer:
          $ref: '#/components/schemas/Customer'
        type:
          description: "Charge type is used to determine whether a charge will have\
            \ a deadline, fines and interests"
          enum:
          - DYNAMIC
          - OVERDUE
          type: string
        comment:
          type: string
        brCode:
          description: EMV BRCode to be rendered as a QRCode
          type: string
        status:
          enum:
          - ACTIVE
          - COMPLETED
          - EXPIRED
          type: string
        correlationID:
          description: Your correlation ID to keep track of this charge
          type: string
        paymentLinkID:
          description: "Payment Link ID, used on payment link and to retrieve qrcode\
            \ image"
          type: string
        paymentLinkUrl:
          description: Payment Link URL to be shared with customers
        globalID:
          description: External ID of this charge
        transactionID:
          description: unique uuid used as the txid from Pix into the provider from
            your openpix account. This field link the charge with the transaction
            when paid.
        identifier:
          description: Custom identifier for EMV
          type: string
        qrCodeImage:
          description: QRCode image link URL
        additionalInfo:
          description: Additional info of the charge
          items:
            $ref: '#/components/schemas/Charge_additionalInfo_inner'
          type: array
        pixKey:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        expiresIn:
          type: string
      type: object
    ChargePayload:
      example:
        expiresIn: 6.027456183070403
        identifier: identifier
        daysForDueDate: 1.4658129805029452
        fines:
          value: 2.3021358869347655
        additionalInfo:
        - value: value
          key: key
        - value: value
          key: key
        correlationID: correlationID
        comment: comment
        type: DYNAMIC
        interests:
          value: 5.637376656633329
        value: 0.8008281904610115
        daysAfterDueDate: 5.962133916683182
        customer:
          address:
            zipcode: zipcode
            number: number
            country: country
            city: city
            street: street
            neighborhood: neighborhood
            state: state
            complement: complement
          phone: phone
          taxID: taxID
          name: name
          correlationID: correlationID
          email: email
      properties:
        correlationID:
          description: Your correlation ID to keep track of this charge
          type: string
        value:
          description: Value in cents of this charge
          type: number
        type:
          description: "Charge type is used to determine whether a charge will have\
            \ a deadline, fines and interests"
          enum:
          - DYNAMIC
          - OVERDUE
          type: string
        comment:
          description: Comment to be added in infoPagador
          type: string
        identifier:
          description: Custom identifier for EMV
          type: string
        expiresIn:
          description: Expires the charge in seconds (minimum is 15 minutes)
          type: number
        customer:
          $ref: '#/components/schemas/CustomerPayload'
        daysForDueDate:
          description: Time in days until the charge hits the deadline so fines and
            interests start applying. This property is only considered for charges
            of type OVERDUE
          type: number
        daysAfterDueDate:
          description: Time in days that a charge is still payable after the deadline.
            This property is only considered for charges of type OVERDUE
          type: number
        interests:
          $ref: '#/components/schemas/ChargePayload_interests'
        fines:
          $ref: '#/components/schemas/ChargePayload_fines'
        additionalInfo:
          description: Additional info of the charge
          items:
            $ref: '#/components/schemas/Charge_additionalInfo_inner'
          type: array
      required:
      - correlationID
      - value
      type: object
    ChargeRefund:
      properties:
        value:
          description: Value in cents of this refund
          type: number
        status:
          enum:
          - IN_PROCESSING
          - CONFIRMED
          - REJECTED
          type: string
        correlationID:
          description: Your correlation ID to keep track of this refund
          type: string
        endToEndId:
          description: The endToEndId of this refund
          type: string
        time:
          description: Time of this refund
          type: string
        comment:
          description: Comment of this refund
          type: string
      type: object
    ChargeRefundPayload:
      example:
        correlationID: correlationID
        comment: comment
        value: 0.8008281904610115
      properties:
        correlationID:
          description: Your correlation ID to keep track for this refund
          type: string
        value:
          description: Value in cents for this refund
          type: number
        comment:
          description: Comment for this refund. Maximum length of 140 characters.
          maximum: 140
          type: string
      required:
      - correlationID
      type: object
    Customer:
      example:
        address:
          zipcode: zipcode
          number: number
          country: country
          city: city
          street: street
          neighborhood: neighborhood
          state: state
          complement: complement
        phone: phone
        taxID:
          taxID: taxID
          type: type
        name: name
        correlationID: correlationID
        email: email
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        taxID:
          $ref: '#/components/schemas/Customer_taxID'
        correlationID:
          type: string
        address:
          $ref: '#/components/schemas/Customer_address'
      type: object
    CustomerPayload:
      example:
        address:
          zipcode: zipcode
          number: number
          country: country
          city: city
          street: street
          neighborhood: neighborhood
          state: state
          complement: complement
        phone: phone
        taxID: taxID
        name: name
        correlationID: correlationID
        email: email
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        taxID:
          type: string
        correlationID:
          type: string
        address:
          $ref: '#/components/schemas/Customer_address'
      required:
      - name
      - taxID
      type: object
    ApplicationEnumTypePayload:
      description: Type of the application that you want to register. Each of this
        has some kind of permissions.
      enum:
      - API
      - PLUGIN
      - ORACLE
      type: string
    TaxIDObjectPayload:
      example:
        taxID: taxID
        type: BR:CNPJ
      properties:
        taxID:
          description: The tax identifier of your account holder. This should be a
            raw string with only digits.
          type: string
        type:
          enum:
          - BR:CNPJ
          type: string
      type: object
    PreRegistrationUserObject:
      example:
        firstName: firstName
        lastName: lastName
        phone: phone
        email: email
      properties:
        firstName:
          description: |
            The user's first name.
            If the pre registration has been approved, this will be turn the company's first user first name.
          type: string
        lastName:
          description: |
            The user's last name.
            If the pre registration has been approved, this will be turn the company's first user last name.
          type: string
        email:
          description: |
            The user's email.
            It'll be the email that will entered in contact to validate that it's a real person (it's a step to approve the preregistration).
            After approving the preregistration, it'll be the company's user email.
          type: string
        phone:
          description: |
            The user's phone number, need to be a validated phone number because it'll receive a SMS confirming that is a real person.
            We're accept only values that matches the E.164 standard, that follows this pattern: [+][country code][local phone number].
          type: string
      required:
      - email
      - firstName
      - lastName
      - phone
      type: object
    PreRegistrationObject:
      example:
        website: website
        taxID:
          taxID: taxID
          type: BR:CNPJ
        name: name
      properties:
        name:
          description: The name of this preregistration. It'll be related as your
            company name too.
          type: string
        website:
          description: A website that is related to this preregistration.
          type: string
        taxID:
          $ref: '#/components/schemas/TaxIDObjectPayload'
      required:
      - name
      - taxID
      type: object
    PreRegistrationPayloadObject:
      example:
        user:
          firstName: firstName
          lastName: lastName
          phone: phone
          email: email
        preRegistration:
          website: website
          taxID:
            taxID: taxID
            type: BR:CNPJ
          name: name
      properties:
        preRegistration:
          $ref: '#/components/schemas/PreRegistrationObject'
        user:
          $ref: '#/components/schemas/PreRegistrationUserObject'
      type: object
    AccountObjectPayload:
      example:
        clientId: clientId
      properties:
        clientId:
          description: The client ID from the company bank account that is related
            to this preregistration/company.
          type: string
      type: object
    CompanyObjectPayload:
      example:
        taxID:
          taxID: taxID
          type: BR:CNPJ
        name: name
        id: id
      properties:
        id:
          description: The ID of the company that is related to this preregistration.
          type: string
        name:
          description: The name of the company that is related to this preregistration.
          type: string
        taxID:
          $ref: '#/components/schemas/TaxIDObjectPayload'
      type: object
    PreRegistrationObjectPayload:
      example:
        taxID:
          taxID: taxID
          type: BR:CNPJ
        name: name
      properties:
        name:
          description: "When the preregistration will turn a company, this will be\
            \ the name of the company that this preregistration is related."
          type: string
        taxID:
          $ref: '#/components/schemas/TaxIDObjectPayload'
      type: object
    PartnerApplicationPayload:
      example:
        clientId: clientId
        name: name
        clientSecret: clientSecret
        isActive: true
        type: null
      properties:
        name:
          description: The name that identifies your application.
          type: string
        isActive:
          description: Current status of your application.
          type: boolean
        type:
          $ref: '#/components/schemas/ApplicationEnumTypePayload'
        clientId:
          description: The ID of this client application.
          type: string
        clientSecret:
          description: The secret of this client application.
          type: string
      type: object
    PaymentCreatePayload:
      example:
        sourceAccountId: sourceAccountId
        correlationID: correlationID
        comment: comment
        destinationAlias: destinationAlias
        value: 0.8008281904610115
      properties:
        value:
          description: value of the requested payment in cents
          type: number
        destinationAlias:
          description: the pix key the payment should be sent to
          type: string
        correlationID:
          description: an unique identifier for your payment
          type: string
        comment:
          description: the comment that will be send alongisde your payment
          type: string
        sourceAccountId:
          description: "an optional id for the source account of the payment, if not\
            \ informed will assume the default account"
          type: string
      type: object
    Payment:
      example:
        sourceAccountId: sourceAccountId
        correlationID: correlationID
        comment: comment
        destinationAlias: destinationAlias
        value: 0.8008281904610115
        status: CREATED
      properties:
        value:
          description: value of the requested payment in cents
          type: number
        destinationAlias:
          description: the pix key the payment should be sent to
          type: string
        correlationID:
          description: Your correlation ID to keep track of this payment
          type: string
        comment:
          description: the comment that will be send alongisde your payment
          type: string
        status:
          description: payment status
          enum:
          - CREATED
          - FAILED
          - CONFIRMED
          - DENIED
          type: string
        sourceAccountId:
          description: the id of the payment source account
          type: string
      type: object
    PaymentTransaction:
      example:
        time: time
        endToEndId: endToEndId
        value: 6.027456183070403
      properties:
        value:
          description: value of the transaction generated by the payment in cents
          type: number
        endToEndId:
          description: endToEndId of the transaction generated by the payment
          type: string
        time:
          description: time the transaction generated by the payment happened
          type: string
      type: object
    PixQrCode:
      example:
        identifier: identifier
        createdAt: createdAt
        paymentLinkID: paymentLinkID
        name: name
        comment: comment
        correlationID: correlationID
        paymentLinkUrl: ""
        brCode: brCode
        value: value
        qrCodeImage: ""
        updatedAt: updatedAt
      properties:
        name:
          type: string
        value:
          type: string
        comment:
          type: string
        identifier:
          description: Custom identifier for EMV
          type: string
        brCode:
          description: EMV BRCode to be rendered as a Pix QRCode
          type: string
        correlationID:
          description: Your correlation ID to keep track of this pix qrcode
          type: string
        paymentLinkID:
          description: "Payment Link ID, used on payment link and to retrieve qrcode\
            \ image"
          type: string
        paymentLinkUrl:
          description: Payment Link URL to be shared with customers
        qrCodeImage:
          description: QRCode image link URL
        createdAt:
          type: string
        updatedAt:
          type: string
      type: object
    PixQrCodePayload:
      example:
        identifier: identifier
        name: name
        correlationID: correlationID
        comment: comment
        value: 0.8008281904610115
      properties:
        name:
          description: Name of this pix qrcode
          type: string
        correlationID:
          description: Your correlation ID to keep track of this qrcode
          type: string
        value:
          description: Value in cents of this qrcode
          type: number
        comment:
          description: Comment to be added in infoPagador
          type: string
        identifier:
          description: Custom identifier for EMV
          type: string
      required:
      - identifier
      - name
      type: object
    Refund:
      properties:
        value:
          type: number
        status:
          enum:
          - IN_PROCESSING
          - REFUNDED
          - NOT_ACCOMPLISHED
          type: string
        correlationID:
          description: Your correlation ID to keep track of this refund
          type: string
        refundId:
          description: Unique refund ID for this pix refund
          type: string
        time:
          description: Time of this refund
          type: string
        comment:
          description: Comment of this refund
          type: string
      type: object
    RefundPayload:
      example:
        correlationID: correlationID
        comment: comment
        value: 0.8008281904610115
        transactionEndToEndId: transactionEndToEndId
      properties:
        value:
          type: number
        transactionEndToEndId:
          description: "Your transaction ID, or endToEnd ID, to keep track of this\
            \ refund"
          type: string
        correlationID:
          description: "Your correlation ID, unique identifier refund"
          type: string
        comment:
          description: Comment of this refund. Maximum length of 140 characters.
          maximum: 140
          type: string
      type: object
    Subscription:
      properties:
        globalID:
          description: The globalID of the subscription.
          type: string
        value:
          description: Value in cents of the subscription
          type: number
        customer:
          $ref: '#/components/schemas/Customer'
        dayGenerateCharge:
          description: Day of the month that the charges will be generated
          type: number
      type: object
    SubscriptionPayload:
      example:
        dayGenerateCharge: 16.274131694290087
        value: 0.8008281904610115
        customer:
          phone: phone
          taxID: taxID
          name: name
          email: email
      properties:
        customer:
          $ref: '#/components/schemas/SubscriptionPayload_customer'
        value:
          description: Value in cents of this subscription
          type: number
        dayGenerateCharge:
          default: 5
          description: Day of the month that the charges will be generated. Maximun
            of 27.
          maximum: 27
          minimum: 0
          type: number
      required:
      - customer
      - value
      type: object
    Transaction:
      example:
        charge:
          identifier: identifier
          paymentLinkID: paymentLinkID
          globalID: ""
          type: DYNAMIC
          transactionID: ""
          expiresIn: expiresIn
          createdAt: createdAt
          additionalInfo:
          - value: value
            key: key
          - value: value
            key: key
          comment: comment
          correlationID: correlationID
          paymentLinkUrl: ""
          brCode: brCode
          value: 0.8008281904610115
          qrCodeImage: ""
          pixKey: pixKey
          customer:
            address:
              zipcode: zipcode
              number: number
              country: country
              city: city
              street: street
              neighborhood: neighborhood
              state: state
              complement: complement
            phone: phone
            taxID:
              taxID: taxID
              type: type
            name: name
            correlationID: correlationID
            email: email
          status: ACTIVE
          updatedAt: updatedAt
        globalID: ""
        endToEndID: endToEndID
        endToEndId: endToEndId
        type: PAYMENT
        payer:
          address:
            zipcode: zipcode
            number: number
            country: country
            city: city
            street: street
            neighborhood: neighborhood
            state: state
            complement: complement
          phone: phone
          taxID:
            taxID: taxID
            type: type
          name: name
          correlationID: correlationID
          email: email
        transactionID: transactionID
        infoPagador: infoPagador
        time: time
        pixQrCode:
          identifier: identifier
          createdAt: createdAt
          paymentLinkID: paymentLinkID
          name: name
          comment: comment
          correlationID: correlationID
          paymentLinkUrl: ""
          brCode: brCode
          value: value
          qrCodeImage: ""
          updatedAt: updatedAt
        value: 6.027456183070403
        customer:
          address:
            zipcode: zipcode
            number: number
            country: country
            city: city
            street: street
            neighborhood: neighborhood
            state: state
            complement: complement
          phone: phone
          taxID:
            taxID: taxID
            type: type
          name: name
          correlationID: correlationID
          email: email
        withdraw:
          infoPagador: infoPagador
          time: time
          endToEndID: endToEndID
          endToEndId: endToEndId
          type: type
          value: 1.4658129805029452
          payer:
            address:
              zipcode: zipcode
              number: number
              country: country
              city: city
              street: street
              neighborhood: neighborhood
              state: state
              complement: complement
            phone: phone
            taxID:
              taxID: taxID
              type: type
            name: name
            correlationID: correlationID
            email: email
          transactionID: transactionID
      properties:
        charge:
          $ref: '#/components/schemas/Charge'
        value:
          type: number
        time:
          type: string
        endToEndID:
          type: string
        transactionID:
          type: string
        infoPagador:
          type: string
        endToEndId:
          type: string
        customer:
          $ref: '#/components/schemas/Customer'
        withdraw:
          $ref: '#/components/schemas/PixWithdrawTransaction'
        payer:
          $ref: '#/components/schemas/Customer'
        type:
          description: Pix Transaction type
          enum:
          - PAYMENT
          - WITHDRAW
          - REFUND
          - FEE
          type: string
        globalID:
          description: External ID of this transaction
        pixQrCode:
          $ref: '#/components/schemas/PixQrCode'
      type: object
    PixWithdrawTransaction:
      example:
        infoPagador: infoPagador
        time: time
        endToEndID: endToEndID
        endToEndId: endToEndId
        type: type
        value: 1.4658129805029452
        payer:
          address:
            zipcode: zipcode
            number: number
            country: country
            city: city
            street: street
            neighborhood: neighborhood
            state: state
            complement: complement
          phone: phone
          taxID:
            taxID: taxID
            type: type
          name: name
          correlationID: correlationID
          email: email
        transactionID: transactionID
      properties:
        value:
          type: number
        time:
          type: string
        endToEndID:
          type: string
        transactionID:
          type: string
        infoPagador:
          type: string
        endToEndId:
          type: string
        payer:
          $ref: '#/components/schemas/Customer'
        type:
          type: string
      type: object
    WebhookPayload:
      properties:
        name:
          type: number
        event:
          $ref: '#/components/schemas/WebhookEventEnum'
        url:
          type: string
        authorization:
          type: string
        isActive:
          type: boolean
      type: object
    Webhook:
      properties:
        id:
          type: string
        name:
          type: number
        event:
          $ref: '#/components/schemas/WebhookEventEnum'
        url:
          type: string
        authorization:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
        updatedAt:
          type: string
      type: object
    WebhookEventEnum:
      description: |
        Available events to register a webhook to listen to. If no one selected anyone the default event will be OPENPIX:TRANSACTION_RECEIVED.

        * **OPENPIX:CHARGE_CREATED** - New charge created
        * **OPENPIX:CHARGE_COMPLETED** - Charge completed is when a charge is fully paid
        * **OPENPIX:CHARGE_EXPIRED** - Charge expired is when a charge is not fully paid and expired
        * **OPENPIX:TRANSACTION_RECEIVED** - New PIX transaction received
        * **OPENPIX:TRANSACTION_REFUND_RECEIVED** - New PIX transaction refund received or refunded
        * **OPENPIX:MOVEMENT_CONFIRMED** - Payment confirmed is when the pix transaction related to the payment gets confirmed
        * **OPENPIX:MOVEMENT_FAILED** - Payment failed is when the payment gets approved and a error occurs
        * **OPENPIX:MOVEMENT_REMOVED** - Payment was removed by a user
      enum:
      - OPENPIX:CHARGE_CREATED
      - OPENPIX:CHARGE_COMPLETED
      - OPENPIX:CHARGE_EXPIRED
      - OPENPIX:TRANSACTION_RECEIVED
      - OPENPIX:TRANSACTION_REFUND_RECEIVED
      - OPENPIX:MOVEMENT_CONFIRMED
      - OPENPIX:MOVEMENT_FAILED
      - OPENPIX:MOVEMENT_REMOVED
      type: string
    End:
      description: End date used in the query. Complies with RFC 3339.
      example: 2020-12-01T17:00:00Z
      format: date-time
      title: End Date
      type: string
    Start:
      description: Start date used in the query. Complies with RFC 3339.
      example: 2020-01-01T00:00:00Z
      format: date-time
      title: Start Date
      type: string
    _api_v1_account__accountId__get_200_response:
      example:
        account:
          accountId: accountId
          isDefault: true
          balance:
            total: 0.8008281904610115
            blocked: 6.027456183070403
            available: 1.4658129805029452
      properties:
        account:
          $ref: '#/components/schemas/CompanyBankAccount'
      type: object
    _api_v1_account__accountId__get_400_response:
      properties:
        error:
          type: string
      type: object
    _api_v1_account__get_200_response:
      example:
        accounts:
        - accountId: accountId
          isDefault: true
          balance:
            total: 0.8008281904610115
            blocked: 6.027456183070403
            available: 1.4658129805029452
        - accountId: accountId
          isDefault: true
          balance:
            total: 0.8008281904610115
            blocked: 6.027456183070403
            available: 1.4658129805029452
      properties:
        accounts:
          items:
            $ref: '#/components/schemas/CompanyBankAccount'
          type: array
      type: object
    _api_v1_account__accountId__withdraw_post_request:
      properties:
        value:
          description: Value in cents
          type: number
      type: object
    _api_v1_account__accountId__withdraw_post_200_response_withdraw:
      example:
        account:
          accountId: accountId
          isDefault: true
          balance:
            total: 0.8008281904610115
            blocked: 6.027456183070403
            available: 1.4658129805029452
        transaction:
          endToEndId: endToEndId
          value: value
      properties:
        account:
          $ref: '#/components/schemas/CompanyBankAccount'
        transaction:
          $ref: '#/components/schemas/WithdrawTransaction'
      type: object
    _api_v1_account__accountId__withdraw_post_200_response:
      example:
        withdraw:
          account:
            accountId: accountId
            isDefault: true
            balance:
              total: 0.8008281904610115
              blocked: 6.027456183070403
              available: 1.4658129805029452
          transaction:
            endToEndId: endToEndId
            value: value
      properties:
        withdraw:
          $ref: '#/components/schemas/_api_v1_account__accountId__withdraw_post_200_response_withdraw'
      type: object
    _api_v1_cashback_fidelity_balance__taxID__get_200_response:
      example:
        balance: 0.8008281904610115
        status: status
      properties:
        balance:
          type: number
        status:
          type: string
      type: object
    _api_v1_cashback_fidelity_post_request:
      properties:
        taxID:
          description: Customer taxID (CPF or CNPJ)
          type: string
        value:
          description: Cashback value in centavos
          type: number
      type: object
    _api_v1_cashback_fidelity_post_200_response_cashback:
      description: Object representing the existing cashback
      example:
        value: 0.8008281904610115
      properties:
        value:
          description: Cashback value in centavos
          type: number
      type: object
    _api_v1_cashback_fidelity_post_200_response:
      example:
        message: message
        cashback:
          value: 0.8008281904610115
      properties:
        cashback:
          $ref: '#/components/schemas/_api_v1_cashback_fidelity_post_200_response_cashback'
        message:
          description: String explaining what happened
          type: string
      type: object
    _api_v1_cashback_fidelity_post_201_response_cashback:
      description: Object representing the new cashback
      properties:
        value:
          description: Cashback value in centavos
          type: number
      type: object
    _api_v1_cashback_fidelity_post_201_response:
      properties:
        cashback:
          $ref: '#/components/schemas/_api_v1_cashback_fidelity_post_201_response_cashback'
        message:
          description: String explaining what happened
          type: string
      type: object
    _api_v1_charge__id__get_200_response:
      example:
        charge:
          status: ACTIVE
          customer:
            name: Dan
            email: email0@example.com
            phone: "5511999999999"
            taxID:
              taxID: "31324227036"
              type: BR:CPF
          value: 100
          comment: good
          correlationID: 9134e286-6f71-427a-bf00-241681624586
          paymentLinkID: 7777-6f71-427a-bf00-241681624586
          paymentLinkUrl: https://openpix.com.br/pay/9134e286-6f71-427a-bf00-241681624586
          globalID: Q2hhcmdlOjcxOTFmMWIwMjA0NmJmNWY1M2RjZmEwYg==
          qrCodeImage: https://api.openpix.com.br/openpix/charge/brcode/image/9134e286-6f71-427a-bf00-241681624586.png
          brCode: 000201010212261060014br.gov.bcb.pix2584https://api.openpix.com.br/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao
            Paulo62360532867ba5173c734202ac659721306b38c963044BCA
          additionalInfo:
          - key: Product
            value: Pencil
          - key: Invoice
            value: "18476"
          - key: Order
            value: "302"
          expiresIn: 2592000
          expiresDate: 2021-04-01T17:28:51.882Z
          createdAt: 2021-03-02T17:28:51.882Z
          updatedAt: 2021-03-02T17:28:51.882Z
      properties:
        charge:
          $ref: '#/components/schemas/Charge'
      type: object
    _api_v1_charge__id__delete_200_response:
      example:
        status: OK
        id: fe7834b4060c488a9b0f89811be5f5cf
      properties:
        status:
          type: string
        id:
          description: the id previously informed to be found and deleted
          type: string
      type: object
    _api_v1_charge_get_200_response_pageInfo_errors_inner_data:
      example:
        limit: 6.027456183070403
        skip: 0.8008281904610115
      properties:
        skip:
          type: number
        limit:
          type: number
      type: object
    _api_v1_charge_get_200_response_pageInfo_errors_inner:
      example:
        data:
          limit: 6.027456183070403
          skip: 0.8008281904610115
        message: message
      properties:
        message:
          type: string
        data:
          $ref: '#/components/schemas/_api_v1_charge_get_200_response_pageInfo_errors_inner_data'
      type: object
    _api_v1_charge_get_200_response_pageInfo:
      example:
        hasNextPage: true
        limit: 5.962133916683182
        hasPreviousPage: true
        skip: 1.4658129805029452
        totalCount: 5.637376656633329
        errors:
        - data:
            limit: 6.027456183070403
            skip: 0.8008281904610115
          message: message
        - data:
            limit: 6.027456183070403
            skip: 0.8008281904610115
          message: message
      properties:
        errors:
          items:
            $ref: '#/components/schemas/_api_v1_charge_get_200_response_pageInfo_errors_inner'
          type: array
        skip:
          type: number
        limit:
          type: number
        totalCount:
          type: number
        hasPreviousPage:
          type: boolean
        hasNextPage:
          type: boolean
      type: object
    _api_v1_charge_get_200_response:
      example:
        pageInfo:
          skip: 0
          limit: 10
          totalCount: 20
          hasPreviousPage: false
          hasNextPage: true
        charges:
          status: ACTIVE
          customer:
            name: Dan
            email: email0@example.com
            phone: "5511999999999"
            taxID:
              taxID: "31324227036"
              type: BR:CPF
          value: 100
          comment: good
          correlationID: 9134e286-6f71-427a-bf00-241681624586
          paymentLinkID: 7777a23s-6f71-427a-bf00-241681624586
          paymentLinkUrl: https://openpix.com.br/pay/9134e286-6f71-427a-bf00-241681624586
          qrCodeImage: https://api.openpix.com.br/openpix/charge/brcode/image/9134e286-6f71-427a-bf00-241681624586.png
          brCode: 000201010212261060014br.gov.bcb.pix2584https://api.openpix.com.br/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao
            Paulo62360532867ba5173c734202ac659721306b38c963044BCA
          additionalInfo:
          - key: Product
            value: Pencil
          - key: Invoice
            value: "18476"
          - key: Order
            value: "302"
          expiresIn: 2592000
          expiresDate: 2021-04-01T17:28:51.882Z
          createdAt: 2021-03-02T17:28:51.882Z
          updatedAt: 2021-03-02T17:28:51.882Z
      properties:
        charges:
          items:
            $ref: '#/components/schemas/Charge'
          type: array
        pageInfo:
          $ref: '#/components/schemas/_api_v1_charge_get_200_response_pageInfo'
      type: object
    _api_v1_charge_post_200_response:
      example:
        charge:
          status: ACTIVE
          customer:
            name: Dan
            email: email0@example.com
            phone: "5511999999999"
            taxID:
              taxID: "31324227036"
              type: BR:CPF
          value: 100
          comment: good
          correlationID: 9134e286-6f71-427a-bf00-241681624586
          paymentLinkID: 7777a23s-6f71-427a-bf00-241681624586
          paymentLinkUrl: https://openpix.com.br/pay/9134e286-6f71-427a-bf00-241681624586
          qrCodeImage: https://api.openpix.com.br/openpix/charge/brcode/image/9134e286-6f71-427a-bf00-241681624586.png
          expiresIn: 2592000
          expiresDate: 2021-04-01T17:28:51.882Z
          createdAt: 2021-03-02T17:28:51.882Z
          updatedAt: 2021-03-02T17:28:51.882Z
          brCode: 000201010212261060014br.gov.bcb.pix2584https://api.openpix.com.br/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao
            Paulo62360532867ba5173c734202ac659721306b38c963044BCA
          additionalInfo:
          - key: Product
            value: Pencil
          - key: Invoice
            value: "18476"
          - key: Order
            value: "302"
      properties:
        charge:
          $ref: '#/components/schemas/Charge'
        correlationID:
          type: string
        brCode:
          type: string
      type: object
    _api_v1_charge__id__refund_get_200_response:
      example:
        refunds:
        - status: IN_PROCESSING
          value: 10
          correlationID: 9134e286-6f71-427a-bf00-241681624586
          endToEndId: E23114447202304181826HJNwY577YDX
          time: 2021-03-02T17:28:51.882Z
        - status: CONFIRMED
          value: 40
          correlationID: 589a378e-ab45-4f30-bd4d-4496c60f88cf
          endToEndId: E23114447202304181057pOhPMsp2pJZ
          time: 2021-03-05T14:49:02.922Z
          comment: Comentário do reembolso
      properties:
        refunds:
          items:
            $ref: '#/components/schemas/ChargeRefund'
          type: array
      type: object
    _api_v1_charge__id__refund_post_200_response:
      example:
        refund:
          status: IN_PROCESSING
          value: 100
          correlationID: a273e72c-9547-4c75-a213-3b0a2735b8d5
          endToEndId: E23114447202304181826HJNwY577YDX
          time: 2023-03-02T17:28:51.882Z
          comment: Comentário do reembolso
      properties:
        refund:
          $ref: '#/components/schemas/ChargeRefund'
      type: object
    _api_v1_customer__id__get_200_response:
      example:
        customer:
          name: Dan
          email: email0@example.com
          phone: "5511999999999"
          taxID:
            taxID: "31324227036"
            type: BR:CPF
          correlationID: fe7834b4060c488a9b0f89811be5f5cf
      properties:
        customer:
          $ref: '#/components/schemas/Customer'
      type: object
    _api_v1_customer_get_200_response:
      example:
        pageInfo:
          skip: 0
          limit: 10
          totalCount: 20
          hasPreviousPage: false
          hasNextPage: true
        customers:
          customer:
            name: Dan
            email: email0@example.com
            phone: "5511999999999"
            taxID:
              taxID: "31324227036"
              type: BR:CPF
      properties:
        customers:
          items:
            $ref: '#/components/schemas/Customer'
          type: array
        pageInfo:
          $ref: '#/components/schemas/_api_v1_charge_get_200_response_pageInfo'
      type: object
    _api_v1_customer_post_200_response:
      example:
        customer:
          name: Dan
          email: email0@example.com
          phone: "5511999999999"
          taxID:
            taxID: "31324227036"
            type: BR:CPF
      properties:
        customer:
          $ref: '#/components/schemas/Customer'
      type: object
    _api_v1_partner_application_post_request_application:
      properties:
        name:
          description: The name you want to give your application
          type: string
        type:
          $ref: '#/components/schemas/ApplicationEnumTypePayload'
      required:
      - name
      - type
      type: object
    _api_v1_partner_application_post_request:
      properties:
        application:
          $ref: '#/components/schemas/_api_v1_partner_application_post_request_application'
        taxID:
          $ref: '#/components/schemas/TaxIDObjectPayload'
      type: object
    _api_v1_partner_application_post_200_response:
      example:
        application:
          clientId: clientId
          name: name
          clientSecret: clientSecret
          isActive: true
          type: null
      properties:
        application:
          $ref: '#/components/schemas/PartnerApplicationPayload'
      type: object
    _api_v1_partner_company__taxID__get_200_response_preRegistration:
      example:
        company:
          taxID:
            taxID: taxID
            type: BR:CNPJ
          name: name
          id: id
        user:
          firstName: firstName
          lastName: lastName
          phone: phone
          email: email
        account:
          clientId: clientId
        preRegistration:
          taxID:
            taxID: taxID
            type: BR:CNPJ
          name: name
      properties:
        preRegistration:
          $ref: '#/components/schemas/PreRegistrationObjectPayload'
        user:
          $ref: '#/components/schemas/PreRegistrationUserObject'
        company:
          $ref: '#/components/schemas/CompanyObjectPayload'
        account:
          $ref: '#/components/schemas/AccountObjectPayload'
      required:
      - preRegistration
      - user
      type: object
    _api_v1_partner_company__taxID__get_200_response:
      example:
        preRegistration:
          company:
            taxID:
              taxID: taxID
              type: BR:CNPJ
            name: name
            id: id
          user:
            firstName: firstName
            lastName: lastName
            phone: phone
            email: email
          account:
            clientId: clientId
          preRegistration:
            taxID:
              taxID: taxID
              type: BR:CNPJ
            name: name
      properties:
        preRegistration:
          $ref: '#/components/schemas/_api_v1_partner_company__taxID__get_200_response_preRegistration'
      type: object
    _api_v1_partner_company_get_200_response:
      example:
        preRegistrations:
        - company:
            taxID:
              taxID: taxID
              type: BR:CNPJ
            name: name
            id: id
          user:
            firstName: firstName
            lastName: lastName
            phone: phone
            email: email
          account:
            clientId: clientId
          preRegistration:
            taxID:
              taxID: taxID
              type: BR:CNPJ
            name: name
        - company:
            taxID:
              taxID: taxID
              type: BR:CNPJ
            name: name
            id: id
          user:
            firstName: firstName
            lastName: lastName
            phone: phone
            email: email
          account:
            clientId: clientId
          preRegistration:
            taxID:
              taxID: taxID
              type: BR:CNPJ
            name: name
        pageInfo:
          hasNextPage: true
          limit: 5.962133916683182
          hasPreviousPage: true
          skip: 1.4658129805029452
          totalCount: 5.637376656633329
          errors:
          - data:
              limit: 6.027456183070403
              skip: 0.8008281904610115
            message: message
          - data:
              limit: 6.027456183070403
              skip: 0.8008281904610115
            message: message
      properties:
        preRegistrations:
          items:
            $ref: '#/components/schemas/_api_v1_partner_company__taxID__get_200_response_preRegistration'
          type: array
        pageInfo:
          $ref: '#/components/schemas/_api_v1_charge_get_200_response_pageInfo'
      type: object
    _api_v1_payment__id__get_200_response:
      example:
        payment:
          value: 100
          status: CONFIRMED
          destinationAlias: c4249323-b4ca-43f2-8139-8232aab09b93
          comment: payment comment
          correlationID: payment1
          sourceAccountId: my-source-account-id
        transaction:
          value: 100
          endToEndId: transaction-end-to-end-id
          time: 2023-03-20T13:14:17.000Z
      properties:
        payment:
          $ref: '#/components/schemas/Payment'
        transaction:
          $ref: '#/components/schemas/PaymentTransaction'
      type: object
    _api_v1_payment_get_200_response_payments_inner:
      example:
        payment:
          sourceAccountId: sourceAccountId
          correlationID: correlationID
          comment: comment
          destinationAlias: destinationAlias
          value: 0.8008281904610115
          status: CREATED
        transaction:
          time: time
          endToEndId: endToEndId
          value: 6.027456183070403
      properties:
        payment:
          $ref: '#/components/schemas/Payment'
        transaction:
          $ref: '#/components/schemas/PaymentTransaction'
      type: object
    _api_v1_payment_get_200_response:
      example:
        payments:
        - payment:
            sourceAccountId: sourceAccountId
            correlationID: correlationID
            comment: comment
            destinationAlias: destinationAlias
            value: 0.8008281904610115
            status: CREATED
          transaction:
            time: time
            endToEndId: endToEndId
            value: 6.027456183070403
        - payment:
            sourceAccountId: sourceAccountId
            correlationID: correlationID
            comment: comment
            destinationAlias: destinationAlias
            value: 0.8008281904610115
            status: CREATED
          transaction:
            time: time
            endToEndId: endToEndId
            value: 6.027456183070403
        pageInfo:
          hasNextPage: true
          limit: 5.962133916683182
          hasPreviousPage: true
          skip: 1.4658129805029452
          totalCount: 5.637376656633329
          errors:
          - data:
              limit: 6.027456183070403
              skip: 0.8008281904610115
            message: message
          - data:
              limit: 6.027456183070403
              skip: 0.8008281904610115
            message: message
        status: status
      properties:
        status:
          type: string
        payments:
          items:
            $ref: '#/components/schemas/_api_v1_payment_get_200_response_payments_inner'
          type: array
        pageInfo:
          $ref: '#/components/schemas/_api_v1_charge_get_200_response_pageInfo'
      type: object
    _api_v1_payment_post_200_response:
      example:
        payment:
          value: 100
          status: CREATED
          destinationAlias: c4249323-b4ca-43f2-8139-8232aab09b93
          comment: payment comment
          correlationID: payment1
          sourceAccountId: my-source-account-id
      properties:
        payment:
          $ref: '#/components/schemas/Payment'
      type: object
    _api_v1_pixQrCode_static__id__get_200_response:
      example:
        pixQrCode:
          name: pix qrcode static
          value: 100
          comment: pix qrcode static
          correlationID: fe7834b4060c488a9b0f89811be5f5cf
          identifier: zr7833b4060c488a9b0f89811
          paymentLinkID: 7777-6f71-427a-bf00-241681624586
          paymentLinkUrl: https://openpix.com.br/pay/fe7834b4060c488a9b0f89811be5f5cf
          qrCodeImage: https://api.openpix.com.br/openpix/charge/brcode/image/fe7834b4060c488a9b0f89811be5f5cf.png
          brCode: 000201010212261060014br.gov.bcb.pix2584https://api.openpix.com.br/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao
            Paulo62360532867ba5173c734202ac659721306b38c963044BCA
          createdAt: 2021-03-02T17:28:51.882Z
          updatedAt: 2021-03-02T17:28:51.882Z
      properties:
        pixQrCode:
          $ref: '#/components/schemas/PixQrCode'
      type: object
    _api_v1_qrcode_static_get_200_response:
      example:
        pageInfo:
          skip: 0
          limit: 10
          totalCount: 20
          hasPreviousPage: false
          hasNextPage: true
        pixQrCodes:
          name: pix qrcode
          value: 100
          comment: good
          correlationID: 9134e286-6f71-427a-bf00-241681624586
          identifier: zr7833b4060c488a9b0f89811
          paymentLinkID: 7777a23s-6f71-427a-bf00-241681624586
          paymentLinkUrl: https://openpix.com.br/pay/9134e286-6f71-427a-bf00-241681624586
          qrCodeImage: https://api.openpix.com.br/openpix/pixQrCode/brcode/image/9134e286-6f71-427a-bf00-241681624586.png
          brCode: 000201010212261060014br.gov.bcb.pix2584https://api.openpix.com.br/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao
            Paulo62360532867ba5173c734202ac659721306b38c963044BCA
          createdAt: 2021-03-02T17:28:51.882Z
          updatedAt: 2021-03-02T17:28:51.882Z
      properties:
        pixQrCodes:
          items:
            $ref: '#/components/schemas/PixQrCode'
          type: array
        pageInfo:
          $ref: '#/components/schemas/_api_v1_charge_get_200_response_pageInfo'
      type: object
    _api_v1_qrcode_static_post_200_response:
      example:
        pixQrCode:
          value: 100
          comment: good
          correlationID: 9134e286-6f71-427a-bf00-241681624586
          identifier: zr7833b4060c488a9b0f89811
          paymentLinkID: 7777a23s-6f71-427a-bf00-241681624586
          paymentLinkUrl: https://openpix.com.br/pay/9134e286-6f71-427a-bf00-241681624586
          qrCodeImage: https://api.openpix.com.br/openpix/pixQrCode/brcode/image/9134e286-6f71-427a-bf00-241681624586.png
          createdAt: 2021-03-02T17:28:51.882Z
          updatedAt: 2021-03-02T17:28:51.882Z
          brCode: 000201010212261060014br.gov.bcb.pix2584https://api.openpix.com.br/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao
            Paulo62360532867ba5173c734202ac659721306b38c963044BCA
      properties:
        pixQrCode:
          $ref: '#/components/schemas/PixQrCode'
        correlationID:
          type: string
        brCode:
          type: string
      type: object
    _api_v1_refund__id__get_200_response:
      example:
        refund:
          value: 100
          correlationID: 7777-6f71-427a-bf00-241681624586
          refundId: 11bf5b37e0b842e08dcfdc8c4aefc000
          returnIdentification: D09089356202108032000a543e325902
          comment: Comentário do reembolso
      properties:
        refund:
          $ref: '#/components/schemas/Refund'
      type: object
    _api_v1_refund_get_200_response:
      example:
        pageInfo:
          skip: 0
          limit: 10
          totalCount: 20
          hasPreviousPage: false
          hasNextPage: true
        refunds:
        - status: IN_PROCESSING
          value: 100
          correlationID: 9134e286-6f71-427a-bf00-241681624586
          refundId: 9134e2866f71427abf00241681624586
          time: 2021-03-02T17:28:51.882Z
          comment: Comentário do reembolso
      properties:
        refunds:
          items:
            $ref: '#/components/schemas/Refund'
          type: array
        pageInfo:
          $ref: '#/components/schemas/_api_v1_charge_get_200_response_pageInfo'
      type: object
    _api_v1_refund_post_200_response:
      example:
        refund:
          status: IN_PROCESSING
          value: 100
          correlationID: 9134e286-6f71-427a-bf00-241681624586
          refundId: 9134e2866f71427abf00241681624586
          time: 2021-03-02T17:28:51.882Z
          comment: Comentário do reembolso
      properties:
        refund:
          $ref: '#/components/schemas/Refund'
      type: object
    _api_v1_subscriptions__id__get_200_response:
      example:
        subscription:
          globalID: UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=
          customer:
            name: Dan
            email: email0@example.com
            phone: "5511999999999"
            taxID:
              taxID: "31324227036"
              type: BR:CPF
          value: 100
          dayGenerateCharge: 5
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'
      type: object
    _api_v1_transaction__id__get_200_response:
      example:
        transaction:
          charge:
            identifier: identifier
            paymentLinkID: paymentLinkID
            globalID: ""
            type: DYNAMIC
            transactionID: ""
            expiresIn: expiresIn
            createdAt: createdAt
            additionalInfo:
            - value: value
              key: key
            - value: value
              key: key
            comment: comment
            correlationID: correlationID
            paymentLinkUrl: ""
            brCode: brCode
            value: 0.8008281904610115
            qrCodeImage: ""
            pixKey: pixKey
            customer:
              address:
                zipcode: zipcode
                number: number
                country: country
                city: city
                street: street
                neighborhood: neighborhood
                state: state
                complement: complement
              phone: phone
              taxID:
                taxID: taxID
                type: type
              name: name
              correlationID: correlationID
              email: email
            status: ACTIVE
            updatedAt: updatedAt
          globalID: ""
          endToEndID: endToEndID
          endToEndId: endToEndId
          type: PAYMENT
          payer:
            address:
              zipcode: zipcode
              number: number
              country: country
              city: city
              street: street
              neighborhood: neighborhood
              state: state
              complement: complement
            phone: phone
            taxID:
              taxID: taxID
              type: type
            name: name
            correlationID: correlationID
            email: email
          transactionID: transactionID
          infoPagador: infoPagador
          time: time
          pixQrCode:
            identifier: identifier
            createdAt: createdAt
            paymentLinkID: paymentLinkID
            name: name
            comment: comment
            correlationID: correlationID
            paymentLinkUrl: ""
            brCode: brCode
            value: value
            qrCodeImage: ""
            updatedAt: updatedAt
          value: 6.027456183070403
          customer:
            address:
              zipcode: zipcode
              number: number
              country: country
              city: city
              street: street
              neighborhood: neighborhood
              state: state
              complement: complement
            phone: phone
            taxID:
              taxID: taxID
              type: type
            name: name
            correlationID: correlationID
            email: email
          withdraw:
            infoPagador: infoPagador
            time: time
            endToEndID: endToEndID
            endToEndId: endToEndId
            type: type
            value: 1.4658129805029452
            payer:
              address:
                zipcode: zipcode
                number: number
                country: country
                city: city
                street: street
                neighborhood: neighborhood
                state: state
                complement: complement
              phone: phone
              taxID:
                taxID: taxID
                type: type
              name: name
              correlationID: correlationID
              email: email
            transactionID: transactionID
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
      type: object
    _api_v1_transaction_get_200_response:
      example:
        pageInfo:
          hasNextPage: true
          limit: 5.962133916683182
          hasPreviousPage: true
          skip: 1.4658129805029452
          totalCount: 5.637376656633329
          errors:
          - data:
              limit: 6.027456183070403
              skip: 0.8008281904610115
            message: message
          - data:
              limit: 6.027456183070403
              skip: 0.8008281904610115
            message: message
        transactions:
        - charge:
            identifier: identifier
            paymentLinkID: paymentLinkID
            globalID: ""
            type: DYNAMIC
            transactionID: ""
            expiresIn: expiresIn
            createdAt: createdAt
            additionalInfo:
            - value: value
              key: key
            - value: value
              key: key
            comment: comment
            correlationID: correlationID
            paymentLinkUrl: ""
            brCode: brCode
            value: 0.8008281904610115
            qrCodeImage: ""
            pixKey: pixKey
            customer:
              address:
                zipcode: zipcode
                number: number
                country: country
                city: city
                street: street
                neighborhood: neighborhood
                state: state
                complement: complement
              phone: phone
              taxID:
                taxID: taxID
                type: type
              name: name
              correlationID: correlationID
              email: email
            status: ACTIVE
            updatedAt: updatedAt
          globalID: ""
          endToEndID: endToEndID
          endToEndId: endToEndId
          type: PAYMENT
          payer:
            address:
              zipcode: zipcode
              number: number
              country: country
              city: city
              street: street
              neighborhood: neighborhood
              state: state
              complement: complement
            phone: phone
            taxID:
              taxID: taxID
              type: type
            name: name
            correlationID: correlationID
            email: email
          transactionID: transactionID
          infoPagador: infoPagador
          time: time
          pixQrCode:
            identifier: identifier
            createdAt: createdAt
            paymentLinkID: paymentLinkID
            name: name
            comment: comment
            correlationID: correlationID
            paymentLinkUrl: ""
            brCode: brCode
            value: value
            qrCodeImage: ""
            updatedAt: updatedAt
          value: 6.027456183070403
          customer:
            address:
              zipcode: zipcode
              number: number
              country: country
              city: city
              street: street
              neighborhood: neighborhood
              state: state
              complement: complement
            phone: phone
            taxID:
              taxID: taxID
              type: type
            name: name
            correlationID: correlationID
            email: email
          withdraw:
            infoPagador: infoPagador
            time: time
            endToEndID: endToEndID
            endToEndId: endToEndId
            type: type
            value: 1.4658129805029452
            payer:
              address:
                zipcode: zipcode
                number: number
                country: country
                city: city
                street: street
                neighborhood: neighborhood
                state: state
                complement: complement
              phone: phone
              taxID:
                taxID: taxID
                type: type
              name: name
              correlationID: correlationID
              email: email
            transactionID: transactionID
        - charge:
            identifier: identifier
            paymentLinkID: paymentLinkID
            globalID: ""
            type: DYNAMIC
            transactionID: ""
            expiresIn: expiresIn
            createdAt: createdAt
            additionalInfo:
            - value: value
              key: key
            - value: value
              key: key
            comment: comment
            correlationID: correlationID
            paymentLinkUrl: ""
            brCode: brCode
            value: 0.8008281904610115
            qrCodeImage: ""
            pixKey: pixKey
            customer:
              address:
                zipcode: zipcode
                number: number
                country: country
                city: city
                street: street
                neighborhood: neighborhood
                state: state
                complement: complement
              phone: phone
              taxID:
                taxID: taxID
                type: type
              name: name
              correlationID: correlationID
              email: email
            status: ACTIVE
            updatedAt: updatedAt
          globalID: ""
          endToEndID: endToEndID
          endToEndId: endToEndId
          type: PAYMENT
          payer:
            address:
              zipcode: zipcode
              number: number
              country: country
              city: city
              street: street
              neighborhood: neighborhood
              state: state
              complement: complement
            phone: phone
            taxID:
              taxID: taxID
              type: type
            name: name
            correlationID: correlationID
            email: email
          transactionID: transactionID
          infoPagador: infoPagador
          time: time
          pixQrCode:
            identifier: identifier
            createdAt: createdAt
            paymentLinkID: paymentLinkID
            name: name
            comment: comment
            correlationID: correlationID
            paymentLinkUrl: ""
            brCode: brCode
            value: value
            qrCodeImage: ""
            updatedAt: updatedAt
          value: 6.027456183070403
          customer:
            address:
              zipcode: zipcode
              number: number
              country: country
              city: city
              street: street
              neighborhood: neighborhood
              state: state
              complement: complement
            phone: phone
            taxID:
              taxID: taxID
              type: type
            name: name
            correlationID: correlationID
            email: email
          withdraw:
            infoPagador: infoPagador
            time: time
            endToEndID: endToEndID
            endToEndId: endToEndId
            type: type
            value: 1.4658129805029452
            payer:
              address:
                zipcode: zipcode
                number: number
                country: country
                city: city
                street: street
                neighborhood: neighborhood
                state: state
                complement: complement
              phone: phone
              taxID:
                taxID: taxID
                type: type
              name: name
              correlationID: correlationID
              email: email
            transactionID: transactionID
        status: status
      properties:
        status:
          type: string
        transactions:
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
        pageInfo:
          $ref: '#/components/schemas/_api_v1_charge_get_200_response_pageInfo'
      type: object
    _api_v1_webhook__id__delete_200_response:
      example:
        status: status
      properties:
        status:
          type: string
      type: object
    _api_v1_webhook__id__delete_400_response:
      properties:
        error:
          type: string
        status:
          type: string
      type: object
    _api_v1_webhook_get_200_response_pageInfo:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/_api_v1_charge_get_200_response_pageInfo_errors_inner'
          type: array
      type: object
    _api_v1_webhook_get_200_response:
      example:
        pageInfo:
          skip: 0
          limit: 100
          totalCount: 2
          hasPreviousPage: false
          hasNextPage: true
        webhooks:
        - id: V2ViaG9vazo2MDNlYmUxZWRlYjkzNWU4NmQyMmNmMTg=
          name: webhookName
          url: https://mycompany.com.br/webhook
          authorization: openpix
          event: OPENPIX:TRANSACTION_RECEIVED
          isActive: true
          createdAt: 2021-03-02T22:29:10.720Z
          updatedAt: 2021-03-02T22:29:10.720Z
        - id: V2ViaG9vazo2MDNlYmUxZWRlYjkzNWU4NmQyMmNmOTk=
          name: webhookName
          url: https://mycompany.com.br/webhook
          authorization: openpix
          event: OPENPIX:CHARGE_CREATED
          isActive: true
          createdAt: 2021-03-02T22:29:10.720Z
          updatedAt: 2021-03-02T22:29:10.720Z
      properties:
        webhooks:
          items:
            $ref: '#/components/schemas/Webhook'
          type: array
        pageInfo:
          $ref: '#/components/schemas/_api_v1_webhook_get_200_response_pageInfo'
      type: object
    _api_v1_webhook_post_request_pix_raw:
      properties:
        endToEndId:
          type: string
        txid:
          type: string
        valor:
          type: string
        horario:
          type: string
        infoPagador:
          type: string
      type: object
    _api_v1_webhook_post_request_pix:
      properties:
        pixQrCode:
          $ref: '#/components/schemas/PixQrCode'
        charge:
          $ref: '#/components/schemas/Charge'
        payer:
          $ref: '#/components/schemas/Customer'
        time:
          type: string
        value:
          type: string
        transactionID:
          type: string
        infoPagador:
          type: string
        raw:
          $ref: '#/components/schemas/_api_v1_webhook_post_request_pix_raw'
      type: object
    _api_v1_webhook_post_request:
      example:
        charge: null
        pix:
          pixQrCode:
            value: 100
            comment: good
            correlationID: 9134e286-6f71-427a-bf00-241681624586
            identifier: 9134e2866f71427abf00241681624586
            paymentLinkID: 7777a23s-6f71-427a-bf00-241681624586
            paymentLinkUrl: https://openpix.com.br/pay/9134e286-6f71-427a-bf00-241681624586
            qrCodeImage: https://api.openpix.com.br/openpix/pixQrCode/brcode/image/9134e286-6f71-427a-bf00-241681624586.png
            createdAt: 2021-03-02T17:28:51.882Z
            updatedAt: 2021-03-02T17:28:51.882Z
            brCode: 000201010212261060014br.gov.bcb.pix2584https://api.openpix.com.br/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao
              Paulo62360532867ba5173c734202ac659721306b38c963044BCA
          customer: null
          time: 2020-09-09T20:15:00.358Z
          value: 9999
          transactionID: 9134e2866f71427abf00241681624586
          infoPagador: conta
          raw:
            endToEndId: 9134e2866f71427abf00241681624586
            txid: 9134e2866f71427abf00241681624586
            valor: "99.99"
            horario: 2020-09-09T20:15:00.358Z
            infoPagador: conta
      properties:
        charge:
          type: object
        pix:
          $ref: '#/components/schemas/_api_v1_webhook_post_request_pix'
        pixQrCode:
          $ref: '#/components/schemas/PixQrCode'
      type: object
    CompanyBankAccount_balance:
      example:
        total: 0.8008281904610115
        blocked: 6.027456183070403
        available: 1.4658129805029452
      properties:
        total:
          description: Total amount in cents
          type: number
        blocked:
          description: Blocked amount in cents
          type: number
        available:
          description: Available amount in cents
          type: number
      type: object
    Charge_additionalInfo_inner:
      example:
        value: value
        key: key
      properties:
        key:
          description: key of object
          type: string
        value:
          description: value of object
          type: string
      type: object
    ChargePayload_interests:
      description: Interests configuration. This property is only considered for charges
        of type OVERDUE
      example:
        value: 5.637376656633329
      properties:
        value:
          description: Value in basis points of interests to be applied daily after
            the charge hits the deadline
          type: number
      type: object
    ChargePayload_fines:
      description: Fines configuration. This property is only considered for charges
        of type OVERDUE
      example:
        value: 2.3021358869347655
      properties:
        value:
          description: Value in basis points of fines to be applied when the charge
            hits the deadline
          type: number
      type: object
    Customer_taxID:
      example:
        taxID: taxID
        type: type
      properties:
        taxID:
          type: string
        type:
          type: string
      type: object
    Customer_address:
      example:
        zipcode: zipcode
        number: number
        country: country
        city: city
        street: street
        neighborhood: neighborhood
        state: state
        complement: complement
      properties:
        zipcode:
          type: string
        street:
          type: string
        number:
          type: string
        neighborhood:
          type: string
        city:
          type: string
        state:
          type: string
        complement:
          type: string
        country:
          type: string
      type: object
    SubscriptionPayload_customer:
      description: Customer of this subscription
      example:
        phone: phone
        taxID: taxID
        name: name
        email: email
      properties:
        name:
          description: Customer name
          type: string
        email:
          description: Customer email
          type: string
        phone:
          description: Customer phone
          type: string
        taxID:
          description: Customer taxID (CPF or CNPJ)
          type: string
      type: object
  securitySchemes:
    AppID:
      in: header
      name: Authorization
      type: apiKey

