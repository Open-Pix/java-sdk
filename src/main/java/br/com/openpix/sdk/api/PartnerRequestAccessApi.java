/*
 * Woovi
 * A Woovi é uma Plataforma de Gestão de Pagamentos. Para utilizar nossa API você deve acessar  __[https://api.woovi.com/](https://api.woovi.com/)__ e somente o mesmo. A Woovi não aceita subdominios para a API.  Veja como configurar seu acesso a nossa API [aqui](https://developers.woovi.com/docs/apis/api-getting-started).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package br.com.openpix.sdk.api;

import br.com.openpix.sdk.ApiCallback;
import br.com.openpix.sdk.ApiClient;
import br.com.openpix.sdk.ApiException;
import br.com.openpix.sdk.ApiResponse;
import br.com.openpix.sdk.Configuration;
import br.com.openpix.sdk.Pair;
import br.com.openpix.sdk.ProgressRequestBody;
import br.com.openpix.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import br.com.openpix.sdk.model.ApiV1AccountAccountIdGet400Response;
import br.com.openpix.sdk.model.ApiV1PartnerApplicationPost200Response;
import br.com.openpix.sdk.model.ApiV1PartnerApplicationPostRequest;
import br.com.openpix.sdk.model.ApiV1PartnerCompanyGet200Response;
import br.com.openpix.sdk.model.ApiV1PartnerCompanyTaxIDGet200Response;
import br.com.openpix.sdk.model.PreRegistrationPayloadObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PartnerRequestAccessApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PartnerRequestAccessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PartnerRequestAccessApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV1PartnerApplicationPost
     * @param apiV1PartnerApplicationPostRequest The request body to create a pre registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Our \&quot;idempotence output\&quot;, if you get this HTTP code, it&#39;s an application that already has been registered.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new application has been registered. It&#39;ll be identified by the name that you give to it and by the company that has been referenced.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are unauthorized to use this endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PartnerApplicationPostCall(ApiV1PartnerApplicationPostRequest apiV1PartnerApplicationPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1PartnerApplicationPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/partner/application";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AppID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PartnerApplicationPostValidateBeforeCall(ApiV1PartnerApplicationPostRequest apiV1PartnerApplicationPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiV1PartnerApplicationPostRequest' is set
        if (apiV1PartnerApplicationPostRequest == null) {
            throw new ApiException("Missing the required parameter 'apiV1PartnerApplicationPostRequest' when calling apiV1PartnerApplicationPost(Async)");
        }

        return apiV1PartnerApplicationPostCall(apiV1PartnerApplicationPostRequest, _callback);

    }

    /**
     * Create a new application to some of your preregistration&#39;s company.
     * As a partner company, you can create a new application to some of your companies. The application should give access to our API to this companies, so they can use it too. 
     * @param apiV1PartnerApplicationPostRequest The request body to create a pre registration. (required)
     * @return ApiV1PartnerApplicationPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Our \&quot;idempotence output\&quot;, if you get this HTTP code, it&#39;s an application that already has been registered.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new application has been registered. It&#39;ll be identified by the name that you give to it and by the company that has been referenced.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are unauthorized to use this endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1PartnerApplicationPost200Response apiV1PartnerApplicationPost(ApiV1PartnerApplicationPostRequest apiV1PartnerApplicationPostRequest) throws ApiException {
        ApiResponse<ApiV1PartnerApplicationPost200Response> localVarResp = apiV1PartnerApplicationPostWithHttpInfo(apiV1PartnerApplicationPostRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new application to some of your preregistration&#39;s company.
     * As a partner company, you can create a new application to some of your companies. The application should give access to our API to this companies, so they can use it too. 
     * @param apiV1PartnerApplicationPostRequest The request body to create a pre registration. (required)
     * @return ApiResponse&lt;ApiV1PartnerApplicationPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Our \&quot;idempotence output\&quot;, if you get this HTTP code, it&#39;s an application that already has been registered.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new application has been registered. It&#39;ll be identified by the name that you give to it and by the company that has been referenced.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are unauthorized to use this endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1PartnerApplicationPost200Response> apiV1PartnerApplicationPostWithHttpInfo(ApiV1PartnerApplicationPostRequest apiV1PartnerApplicationPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1PartnerApplicationPostValidateBeforeCall(apiV1PartnerApplicationPostRequest, null);
        Type localVarReturnType = new TypeToken<ApiV1PartnerApplicationPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new application to some of your preregistration&#39;s company. (asynchronously)
     * As a partner company, you can create a new application to some of your companies. The application should give access to our API to this companies, so they can use it too. 
     * @param apiV1PartnerApplicationPostRequest The request body to create a pre registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Our \&quot;idempotence output\&quot;, if you get this HTTP code, it&#39;s an application that already has been registered.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new application has been registered. It&#39;ll be identified by the name that you give to it and by the company that has been referenced.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are unauthorized to use this endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PartnerApplicationPostAsync(ApiV1PartnerApplicationPostRequest apiV1PartnerApplicationPostRequest, final ApiCallback<ApiV1PartnerApplicationPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PartnerApplicationPostValidateBeforeCall(apiV1PartnerApplicationPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiV1PartnerApplicationPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1PartnerCompanyGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list with preregistrations. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PartnerCompanyGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/partner/company";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AppID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PartnerCompanyGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1PartnerCompanyGetCall(_callback);

    }

    /**
     * Get every preregistration that is managed by you.
     * 
     * @return ApiV1PartnerCompanyGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list with preregistrations. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1PartnerCompanyGet200Response apiV1PartnerCompanyGet() throws ApiException {
        ApiResponse<ApiV1PartnerCompanyGet200Response> localVarResp = apiV1PartnerCompanyGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get every preregistration that is managed by you.
     * 
     * @return ApiResponse&lt;ApiV1PartnerCompanyGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list with preregistrations. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1PartnerCompanyGet200Response> apiV1PartnerCompanyGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1PartnerCompanyGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ApiV1PartnerCompanyGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get every preregistration that is managed by you. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list with preregistrations. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PartnerCompanyGetAsync(final ApiCallback<ApiV1PartnerCompanyGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PartnerCompanyGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ApiV1PartnerCompanyGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1PartnerCompanyPost
     * @param preRegistrationPayloadObject The request body to create a pre registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payload with a pre registration data. Being the taxID our idempotence key, if you do the request with the same taxID multiple times, every time you&#39;ll receive the same data from our endpoint.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new preregistration that is related to you has been created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are unauthorized to use this endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PartnerCompanyPostCall(PreRegistrationPayloadObject preRegistrationPayloadObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = preRegistrationPayloadObject;

        // create path and map variables
        String localVarPath = "/api/v1/partner/company";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AppID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PartnerCompanyPostValidateBeforeCall(PreRegistrationPayloadObject preRegistrationPayloadObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preRegistrationPayloadObject' is set
        if (preRegistrationPayloadObject == null) {
            throw new ApiException("Missing the required parameter 'preRegistrationPayloadObject' when calling apiV1PartnerCompanyPost(Async)");
        }

        return apiV1PartnerCompanyPostCall(preRegistrationPayloadObject, _callback);

    }

    /**
     * Create a pre registration with a partner reference (your company)
     * As a partner company, you can create a new pre registration referencing your company as a partner. 
     * @param preRegistrationPayloadObject The request body to create a pre registration. (required)
     * @return PreRegistrationPayloadObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payload with a pre registration data. Being the taxID our idempotence key, if you do the request with the same taxID multiple times, every time you&#39;ll receive the same data from our endpoint.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new preregistration that is related to you has been created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are unauthorized to use this endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public PreRegistrationPayloadObject apiV1PartnerCompanyPost(PreRegistrationPayloadObject preRegistrationPayloadObject) throws ApiException {
        ApiResponse<PreRegistrationPayloadObject> localVarResp = apiV1PartnerCompanyPostWithHttpInfo(preRegistrationPayloadObject);
        return localVarResp.getData();
    }

    /**
     * Create a pre registration with a partner reference (your company)
     * As a partner company, you can create a new pre registration referencing your company as a partner. 
     * @param preRegistrationPayloadObject The request body to create a pre registration. (required)
     * @return ApiResponse&lt;PreRegistrationPayloadObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payload with a pre registration data. Being the taxID our idempotence key, if you do the request with the same taxID multiple times, every time you&#39;ll receive the same data from our endpoint.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new preregistration that is related to you has been created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are unauthorized to use this endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreRegistrationPayloadObject> apiV1PartnerCompanyPostWithHttpInfo(PreRegistrationPayloadObject preRegistrationPayloadObject) throws ApiException {
        okhttp3.Call localVarCall = apiV1PartnerCompanyPostValidateBeforeCall(preRegistrationPayloadObject, null);
        Type localVarReturnType = new TypeToken<PreRegistrationPayloadObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a pre registration with a partner reference (your company) (asynchronously)
     * As a partner company, you can create a new pre registration referencing your company as a partner. 
     * @param preRegistrationPayloadObject The request body to create a pre registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payload with a pre registration data. Being the taxID our idempotence key, if you do the request with the same taxID multiple times, every time you&#39;ll receive the same data from our endpoint.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new preregistration that is related to you has been created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are unauthorized to use this endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PartnerCompanyPostAsync(PreRegistrationPayloadObject preRegistrationPayloadObject, final ApiCallback<PreRegistrationPayloadObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PartnerCompanyPostValidateBeforeCall(preRegistrationPayloadObject, _callback);
        Type localVarReturnType = new TypeToken<PreRegistrationPayloadObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1PartnerCompanyTaxIDGet
     * @param taxID The raw tax ID from the preregistration that you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preregistration retrieved by the tax ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PartnerCompanyTaxIDGetCall(String taxID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/partner/company/{taxID}"
            .replace("{" + "taxID" + "}", localVarApiClient.escapeString(taxID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AppID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PartnerCompanyTaxIDGetValidateBeforeCall(String taxID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxID' is set
        if (taxID == null) {
            throw new ApiException("Missing the required parameter 'taxID' when calling apiV1PartnerCompanyTaxIDGet(Async)");
        }

        return apiV1PartnerCompanyTaxIDGetCall(taxID, _callback);

    }

    /**
     * Get an specific preregistration via taxID param.
     * 
     * @param taxID The raw tax ID from the preregistration that you want to get. (required)
     * @return ApiV1PartnerCompanyTaxIDGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preregistration retrieved by the tax ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1PartnerCompanyTaxIDGet200Response apiV1PartnerCompanyTaxIDGet(String taxID) throws ApiException {
        ApiResponse<ApiV1PartnerCompanyTaxIDGet200Response> localVarResp = apiV1PartnerCompanyTaxIDGetWithHttpInfo(taxID);
        return localVarResp.getData();
    }

    /**
     * Get an specific preregistration via taxID param.
     * 
     * @param taxID The raw tax ID from the preregistration that you want to get. (required)
     * @return ApiResponse&lt;ApiV1PartnerCompanyTaxIDGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preregistration retrieved by the tax ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1PartnerCompanyTaxIDGet200Response> apiV1PartnerCompanyTaxIDGetWithHttpInfo(String taxID) throws ApiException {
        okhttp3.Call localVarCall = apiV1PartnerCompanyTaxIDGetValidateBeforeCall(taxID, null);
        Type localVarReturnType = new TypeToken<ApiV1PartnerCompanyTaxIDGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an specific preregistration via taxID param. (asynchronously)
     * 
     * @param taxID The raw tax ID from the preregistration that you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preregistration retrieved by the tax ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PartnerCompanyTaxIDGetAsync(String taxID, final ApiCallback<ApiV1PartnerCompanyTaxIDGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PartnerCompanyTaxIDGetValidateBeforeCall(taxID, _callback);
        Type localVarReturnType = new TypeToken<ApiV1PartnerCompanyTaxIDGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
