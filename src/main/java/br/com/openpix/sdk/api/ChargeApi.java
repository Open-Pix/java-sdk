/*
 * Woovi
 * A Woovi é uma Plataforma de Gestão de Pagamentos. Para utilizar nossa API você deve acessar  __[https://api.woovi.com/](https://api.woovi.com/)__ e somente o mesmo. A Woovi não aceita subdominios para a API.  Veja como configurar seu acesso a nossa API [aqui](https://developers.woovi.com/docs/apis/api-getting-started).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package br.com.openpix.sdk.api;

import br.com.openpix.sdk.ApiCallback;
import br.com.openpix.sdk.ApiClient;
import br.com.openpix.sdk.ApiException;
import br.com.openpix.sdk.ApiResponse;
import br.com.openpix.sdk.Configuration;
import br.com.openpix.sdk.Pair;
import br.com.openpix.sdk.ProgressRequestBody;
import br.com.openpix.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import br.com.openpix.sdk.model.ApiV1AccountAccountIdGet400Response;
import br.com.openpix.sdk.model.ApiV1ChargeGet200Response;
import br.com.openpix.sdk.model.ApiV1ChargeIdDelete200Response;
import br.com.openpix.sdk.model.ApiV1ChargeIdGet200Response;
import br.com.openpix.sdk.model.ApiV1ChargePost200Response;
import br.com.openpix.sdk.model.ChargePayload;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChargeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChargeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChargeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV1ChargeGet
     * @param start  (optional)
     * @param end  (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of charges </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ChargeGetCall(OffsetDateTime start, OffsetDateTime end, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/charge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AppID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ChargeGetValidateBeforeCall(OffsetDateTime start, OffsetDateTime end, String status, final ApiCallback _callback) throws ApiException {
        return apiV1ChargeGetCall(start, end, status, _callback);

    }

    /**
     * Get a list of charges
     * 
     * @param start  (optional)
     * @param end  (optional)
     * @param status  (optional)
     * @return ApiV1ChargeGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of charges </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1ChargeGet200Response apiV1ChargeGet(OffsetDateTime start, OffsetDateTime end, String status) throws ApiException {
        ApiResponse<ApiV1ChargeGet200Response> localVarResp = apiV1ChargeGetWithHttpInfo(start, end, status);
        return localVarResp.getData();
    }

    /**
     * Get a list of charges
     * 
     * @param start  (optional)
     * @param end  (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;ApiV1ChargeGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of charges </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1ChargeGet200Response> apiV1ChargeGetWithHttpInfo(OffsetDateTime start, OffsetDateTime end, String status) throws ApiException {
        okhttp3.Call localVarCall = apiV1ChargeGetValidateBeforeCall(start, end, status, null);
        Type localVarReturnType = new TypeToken<ApiV1ChargeGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of charges (asynchronously)
     * 
     * @param start  (optional)
     * @param end  (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of charges </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ChargeGetAsync(OffsetDateTime start, OffsetDateTime end, String status, final ApiCallback<ApiV1ChargeGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ChargeGetValidateBeforeCall(start, end, status, _callback);
        Type localVarReturnType = new TypeToken<ApiV1ChargeGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ChargeIdDelete
     * @param id charge ID or correlation ID. You will need URI encoding if your correlation ID has characters outside the ASCII set or reserved characters (%, \\#, /). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The charge deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ChargeIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/charge/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AppID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ChargeIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ChargeIdDelete(Async)");
        }

        return apiV1ChargeIdDeleteCall(id, _callback);

    }

    /**
     * Delete a charge
     * 
     * @param id charge ID or correlation ID. You will need URI encoding if your correlation ID has characters outside the ASCII set or reserved characters (%, \\#, /). (required)
     * @return ApiV1ChargeIdDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The charge deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1ChargeIdDelete200Response apiV1ChargeIdDelete(String id) throws ApiException {
        ApiResponse<ApiV1ChargeIdDelete200Response> localVarResp = apiV1ChargeIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a charge
     * 
     * @param id charge ID or correlation ID. You will need URI encoding if your correlation ID has characters outside the ASCII set or reserved characters (%, \\#, /). (required)
     * @return ApiResponse&lt;ApiV1ChargeIdDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The charge deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1ChargeIdDelete200Response> apiV1ChargeIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1ChargeIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ApiV1ChargeIdDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a charge (asynchronously)
     * 
     * @param id charge ID or correlation ID. You will need URI encoding if your correlation ID has characters outside the ASCII set or reserved characters (%, \\#, /). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The charge deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ChargeIdDeleteAsync(String id, final ApiCallback<ApiV1ChargeIdDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ChargeIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ApiV1ChargeIdDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ChargeIdGet
     * @param id charge ID or correlation ID. You will need URI encoding if your correlation ID has characters outside the ASCII set or reserved characters (%, \\#, /). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The charge retrieve using the given ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ChargeIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/charge/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AppID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ChargeIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ChargeIdGet(Async)");
        }

        return apiV1ChargeIdGetCall(id, _callback);

    }

    /**
     * Get one charge
     * 
     * @param id charge ID or correlation ID. You will need URI encoding if your correlation ID has characters outside the ASCII set or reserved characters (%, \\#, /). (required)
     * @return ApiV1ChargeIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The charge retrieve using the given ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1ChargeIdGet200Response apiV1ChargeIdGet(String id) throws ApiException {
        ApiResponse<ApiV1ChargeIdGet200Response> localVarResp = apiV1ChargeIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get one charge
     * 
     * @param id charge ID or correlation ID. You will need URI encoding if your correlation ID has characters outside the ASCII set or reserved characters (%, \\#, /). (required)
     * @return ApiResponse&lt;ApiV1ChargeIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The charge retrieve using the given ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1ChargeIdGet200Response> apiV1ChargeIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1ChargeIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ApiV1ChargeIdGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get one charge (asynchronously)
     * 
     * @param id charge ID or correlation ID. You will need URI encoding if your correlation ID has characters outside the ASCII set or reserved characters (%, \\#, /). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The charge retrieve using the given ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ChargeIdGetAsync(String id, final ApiCallback<ApiV1ChargeIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ChargeIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ApiV1ChargeIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ChargePost
     * @param chargePayload Data to create a new charge (required)
     * @param returnExisting Make the endpoint idempotent, will return an existent charge if already has a one with the correlationID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Charge ID and also the generated Dynamic BR Code to be rendered as a QRCode </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ChargePostCall(ChargePayload chargePayload, Boolean returnExisting, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chargePayload;

        // create path and map variables
        String localVarPath = "/api/v1/charge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnExisting != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_existing", returnExisting));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AppID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ChargePostValidateBeforeCall(ChargePayload chargePayload, Boolean returnExisting, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chargePayload' is set
        if (chargePayload == null) {
            throw new ApiException("Missing the required parameter 'chargePayload' when calling apiV1ChargePost(Async)");
        }

        return apiV1ChargePostCall(chargePayload, returnExisting, _callback);

    }

    /**
     * Create a new Charge
     * Endpoint to create a new Charge for a customer
     * @param chargePayload Data to create a new charge (required)
     * @param returnExisting Make the endpoint idempotent, will return an existent charge if already has a one with the correlationID (optional)
     * @return ApiV1ChargePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Charge ID and also the generated Dynamic BR Code to be rendered as a QRCode </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1ChargePost200Response apiV1ChargePost(ChargePayload chargePayload, Boolean returnExisting) throws ApiException {
        ApiResponse<ApiV1ChargePost200Response> localVarResp = apiV1ChargePostWithHttpInfo(chargePayload, returnExisting);
        return localVarResp.getData();
    }

    /**
     * Create a new Charge
     * Endpoint to create a new Charge for a customer
     * @param chargePayload Data to create a new charge (required)
     * @param returnExisting Make the endpoint idempotent, will return an existent charge if already has a one with the correlationID (optional)
     * @return ApiResponse&lt;ApiV1ChargePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Charge ID and also the generated Dynamic BR Code to be rendered as a QRCode </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1ChargePost200Response> apiV1ChargePostWithHttpInfo(ChargePayload chargePayload, Boolean returnExisting) throws ApiException {
        okhttp3.Call localVarCall = apiV1ChargePostValidateBeforeCall(chargePayload, returnExisting, null);
        Type localVarReturnType = new TypeToken<ApiV1ChargePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Charge (asynchronously)
     * Endpoint to create a new Charge for a customer
     * @param chargePayload Data to create a new charge (required)
     * @param returnExisting Make the endpoint idempotent, will return an existent charge if already has a one with the correlationID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Charge ID and also the generated Dynamic BR Code to be rendered as a QRCode </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ChargePostAsync(ChargePayload chargePayload, Boolean returnExisting, final ApiCallback<ApiV1ChargePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ChargePostValidateBeforeCall(chargePayload, returnExisting, _callback);
        Type localVarReturnType = new TypeToken<ApiV1ChargePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openpixChargeBrcodeImageIdPngsize1024Get
     * @param id charge link payment ID (required)
     * @param size Size for the image. This size should be between 600 and 4096. if the size parameter was not passed, the default value will be 1024. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Qr Code image as MIME type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openpixChargeBrcodeImageIdPngsize1024GetCall(String id, String size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openpix/charge/brcode/image/{id}.png?size=1024"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AppID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openpixChargeBrcodeImageIdPngsize1024GetValidateBeforeCall(String id, String size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling openpixChargeBrcodeImageIdPngsize1024Get(Async)");
        }

        return openpixChargeBrcodeImageIdPngsize1024GetCall(id, size, _callback);

    }

    /**
     * Get an image of Qr Code from a Charge
     * 
     * @param id charge link payment ID (required)
     * @param size Size for the image. This size should be between 600 and 4096. if the size parameter was not passed, the default value will be 1024. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Qr Code image as MIME type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public void openpixChargeBrcodeImageIdPngsize1024Get(String id, String size) throws ApiException {
        openpixChargeBrcodeImageIdPngsize1024GetWithHttpInfo(id, size);
    }

    /**
     * Get an image of Qr Code from a Charge
     * 
     * @param id charge link payment ID (required)
     * @param size Size for the image. This size should be between 600 and 4096. if the size parameter was not passed, the default value will be 1024. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Qr Code image as MIME type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> openpixChargeBrcodeImageIdPngsize1024GetWithHttpInfo(String id, String size) throws ApiException {
        okhttp3.Call localVarCall = openpixChargeBrcodeImageIdPngsize1024GetValidateBeforeCall(id, size, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get an image of Qr Code from a Charge (asynchronously)
     * 
     * @param id charge link payment ID (required)
     * @param size Size for the image. This size should be between 600 and 4096. if the size parameter was not passed, the default value will be 1024. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Qr Code image as MIME type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openpixChargeBrcodeImageIdPngsize1024GetAsync(String id, String size, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = openpixChargeBrcodeImageIdPngsize1024GetValidateBeforeCall(id, size, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
