/*
 * Woovi
 * A Woovi é uma Plataforma de Gestão de Pagamentos. Para utilizar nossa API você deve acessar  __[https://api.woovi.com/](https://api.woovi.com/)__ e somente o mesmo. A Woovi não aceita subdominios para a API.  Veja como configurar seu acesso a nossa API [aqui](https://developers.woovi.com/docs/apis/api-getting-started).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package br.com.openpix.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Available events to register a webhook to listen to. If no one selected anyone the default event will be OPENPIX:TRANSACTION_RECEIVED.  * **OPENPIX:CHARGE_CREATED** - New charge created * **OPENPIX:CHARGE_COMPLETED** - Charge completed is when a charge is fully paid * **OPENPIX:CHARGE_EXPIRED** - Charge expired is when a charge is not fully paid and expired * **OPENPIX:TRANSACTION_RECEIVED** - New PIX transaction received * **OPENPIX:TRANSACTION_REFUND_RECEIVED** - New PIX transaction refund received or refunded * **OPENPIX:MOVEMENT_CONFIRMED** - Payment confirmed is when the pix transaction related to the payment gets confirmed * **OPENPIX:MOVEMENT_FAILED** - Payment failed is when the payment gets approved and a error occurs * **OPENPIX:MOVEMENT_REMOVED** - Payment was removed by a user 
 */
@JsonAdapter(WebhookEventEnum.Adapter.class)
public enum WebhookEventEnum {
  
  CHARGE_CREATED("OPENPIX:CHARGE_CREATED"),
  
  CHARGE_COMPLETED("OPENPIX:CHARGE_COMPLETED"),
  
  CHARGE_EXPIRED("OPENPIX:CHARGE_EXPIRED"),
  
  TRANSACTION_RECEIVED("OPENPIX:TRANSACTION_RECEIVED"),
  
  TRANSACTION_REFUND_RECEIVED("OPENPIX:TRANSACTION_REFUND_RECEIVED"),
  
  MOVEMENT_CONFIRMED("OPENPIX:MOVEMENT_CONFIRMED"),
  
  MOVEMENT_FAILED("OPENPIX:MOVEMENT_FAILED"),
  
  MOVEMENT_REMOVED("OPENPIX:MOVEMENT_REMOVED");

  private String value;

  WebhookEventEnum(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static WebhookEventEnum fromValue(String value) {
    for (WebhookEventEnum b : WebhookEventEnum.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<WebhookEventEnum> {
    @Override
    public void write(final JsonWriter jsonWriter, final WebhookEventEnum enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public WebhookEventEnum read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return WebhookEventEnum.fromValue(value);
    }
  }
}

