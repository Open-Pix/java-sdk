/*
 * Woovi
 * A Woovi é uma Plataforma de Gestão de Pagamentos. Para utilizar nossa API você deve acessar  __[https://api.woovi.com/](https://api.woovi.com/)__ e somente o mesmo. A Woovi não aceita subdominios para a API.  Veja como configurar seu acesso a nossa API [aqui](https://developers.woovi.com/docs/apis/api-getting-started).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package br.com.openpix.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import br.com.openpix.sdk.JSON;

/**
 * ApiV1WebhookPostRequestPixRaw
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-09T10:01:02.014525-03:00[America/Sao_Paulo]")
public class ApiV1WebhookPostRequestPixRaw {
  public static final String SERIALIZED_NAME_END_TO_END_ID = "endToEndId";
  @SerializedName(SERIALIZED_NAME_END_TO_END_ID)
  private String endToEndId;

  public static final String SERIALIZED_NAME_TXID = "txid";
  @SerializedName(SERIALIZED_NAME_TXID)
  private String txid;

  public static final String SERIALIZED_NAME_VALOR = "valor";
  @SerializedName(SERIALIZED_NAME_VALOR)
  private String valor;

  public static final String SERIALIZED_NAME_HORARIO = "horario";
  @SerializedName(SERIALIZED_NAME_HORARIO)
  private String horario;

  public static final String SERIALIZED_NAME_INFO_PAGADOR = "infoPagador";
  @SerializedName(SERIALIZED_NAME_INFO_PAGADOR)
  private String infoPagador;

  public ApiV1WebhookPostRequestPixRaw() {
  }

  public ApiV1WebhookPostRequestPixRaw endToEndId(String endToEndId) {
    
    this.endToEndId = endToEndId;
    return this;
  }

   /**
   * Get endToEndId
   * @return endToEndId
  **/
  @javax.annotation.Nullable
  public String getEndToEndId() {
    return endToEndId;
  }


  public void setEndToEndId(String endToEndId) {
    this.endToEndId = endToEndId;
  }


  public ApiV1WebhookPostRequestPixRaw txid(String txid) {
    
    this.txid = txid;
    return this;
  }

   /**
   * Get txid
   * @return txid
  **/
  @javax.annotation.Nullable
  public String getTxid() {
    return txid;
  }


  public void setTxid(String txid) {
    this.txid = txid;
  }


  public ApiV1WebhookPostRequestPixRaw valor(String valor) {
    
    this.valor = valor;
    return this;
  }

   /**
   * Get valor
   * @return valor
  **/
  @javax.annotation.Nullable
  public String getValor() {
    return valor;
  }


  public void setValor(String valor) {
    this.valor = valor;
  }


  public ApiV1WebhookPostRequestPixRaw horario(String horario) {
    
    this.horario = horario;
    return this;
  }

   /**
   * Get horario
   * @return horario
  **/
  @javax.annotation.Nullable
  public String getHorario() {
    return horario;
  }


  public void setHorario(String horario) {
    this.horario = horario;
  }


  public ApiV1WebhookPostRequestPixRaw infoPagador(String infoPagador) {
    
    this.infoPagador = infoPagador;
    return this;
  }

   /**
   * Get infoPagador
   * @return infoPagador
  **/
  @javax.annotation.Nullable
  public String getInfoPagador() {
    return infoPagador;
  }


  public void setInfoPagador(String infoPagador) {
    this.infoPagador = infoPagador;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiV1WebhookPostRequestPixRaw apiV1WebhookPostRequestPixRaw = (ApiV1WebhookPostRequestPixRaw) o;
    return Objects.equals(this.endToEndId, apiV1WebhookPostRequestPixRaw.endToEndId) &&
        Objects.equals(this.txid, apiV1WebhookPostRequestPixRaw.txid) &&
        Objects.equals(this.valor, apiV1WebhookPostRequestPixRaw.valor) &&
        Objects.equals(this.horario, apiV1WebhookPostRequestPixRaw.horario) &&
        Objects.equals(this.infoPagador, apiV1WebhookPostRequestPixRaw.infoPagador);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endToEndId, txid, valor, horario, infoPagador);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiV1WebhookPostRequestPixRaw {\n");
    sb.append("    endToEndId: ").append(toIndentedString(endToEndId)).append("\n");
    sb.append("    txid: ").append(toIndentedString(txid)).append("\n");
    sb.append("    valor: ").append(toIndentedString(valor)).append("\n");
    sb.append("    horario: ").append(toIndentedString(horario)).append("\n");
    sb.append("    infoPagador: ").append(toIndentedString(infoPagador)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endToEndId");
    openapiFields.add("txid");
    openapiFields.add("valor");
    openapiFields.add("horario");
    openapiFields.add("infoPagador");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiV1WebhookPostRequestPixRaw
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiV1WebhookPostRequestPixRaw.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiV1WebhookPostRequestPixRaw is not found in the empty JSON string", ApiV1WebhookPostRequestPixRaw.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ApiV1WebhookPostRequestPixRaw.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiV1WebhookPostRequestPixRaw` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endToEndId") != null && !jsonObj.get("endToEndId").isJsonNull()) && !jsonObj.get("endToEndId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endToEndId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endToEndId").toString()));
      }
      if ((jsonObj.get("txid") != null && !jsonObj.get("txid").isJsonNull()) && !jsonObj.get("txid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txid").toString()));
      }
      if ((jsonObj.get("valor") != null && !jsonObj.get("valor").isJsonNull()) && !jsonObj.get("valor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valor").toString()));
      }
      if ((jsonObj.get("horario") != null && !jsonObj.get("horario").isJsonNull()) && !jsonObj.get("horario").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `horario` to be a primitive type in the JSON string but got `%s`", jsonObj.get("horario").toString()));
      }
      if ((jsonObj.get("infoPagador") != null && !jsonObj.get("infoPagador").isJsonNull()) && !jsonObj.get("infoPagador").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infoPagador` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infoPagador").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiV1WebhookPostRequestPixRaw.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiV1WebhookPostRequestPixRaw' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiV1WebhookPostRequestPixRaw> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiV1WebhookPostRequestPixRaw.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiV1WebhookPostRequestPixRaw>() {
           @Override
           public void write(JsonWriter out, ApiV1WebhookPostRequestPixRaw value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiV1WebhookPostRequestPixRaw read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiV1WebhookPostRequestPixRaw given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiV1WebhookPostRequestPixRaw
  * @throws IOException if the JSON string is invalid with respect to ApiV1WebhookPostRequestPixRaw
  */
  public static ApiV1WebhookPostRequestPixRaw fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiV1WebhookPostRequestPixRaw.class);
  }

 /**
  * Convert an instance of ApiV1WebhookPostRequestPixRaw to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

