/*
 * Woovi
 * A Woovi é uma Plataforma de Gestão de Pagamentos. Para utilizar nossa API você deve acessar  __[https://api.woovi.com/](https://api.woovi.com/)__ e somente o mesmo. A Woovi não aceita subdominios para a API.  Veja como configurar seu acesso a nossa API [aqui](https://developers.woovi.com/docs/apis/api-getting-started).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package br.com.openpix.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import br.com.openpix.sdk.JSON;

/**
 * PixQrCode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-09T10:01:02.014525-03:00[America/Sao_Paulo]")
public class PixQrCode {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_BR_CODE = "brCode";
  @SerializedName(SERIALIZED_NAME_BR_CODE)
  private String brCode;

  public static final String SERIALIZED_NAME_CORRELATION_I_D = "correlationID";
  @SerializedName(SERIALIZED_NAME_CORRELATION_I_D)
  private String correlationID;

  public static final String SERIALIZED_NAME_PAYMENT_LINK_I_D = "paymentLinkID";
  @SerializedName(SERIALIZED_NAME_PAYMENT_LINK_I_D)
  private String paymentLinkID;

  public static final String SERIALIZED_NAME_PAYMENT_LINK_URL = "paymentLinkUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_LINK_URL)
  private Object paymentLinkUrl = null;

  public static final String SERIALIZED_NAME_QR_CODE_IMAGE = "qrCodeImage";
  @SerializedName(SERIALIZED_NAME_QR_CODE_IMAGE)
  private Object qrCodeImage = null;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public PixQrCode() {
  }

  public PixQrCode name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PixQrCode value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  public PixQrCode comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  public PixQrCode identifier(String identifier) {
    
    this.identifier = identifier;
    return this;
  }

   /**
   * Custom identifier for EMV
   * @return identifier
  **/
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }


  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public PixQrCode brCode(String brCode) {
    
    this.brCode = brCode;
    return this;
  }

   /**
   * EMV BRCode to be rendered as a Pix QRCode
   * @return brCode
  **/
  @javax.annotation.Nullable
  public String getBrCode() {
    return brCode;
  }


  public void setBrCode(String brCode) {
    this.brCode = brCode;
  }


  public PixQrCode correlationID(String correlationID) {
    
    this.correlationID = correlationID;
    return this;
  }

   /**
   * Your correlation ID to keep track of this pix qrcode
   * @return correlationID
  **/
  @javax.annotation.Nullable
  public String getCorrelationID() {
    return correlationID;
  }


  public void setCorrelationID(String correlationID) {
    this.correlationID = correlationID;
  }


  public PixQrCode paymentLinkID(String paymentLinkID) {
    
    this.paymentLinkID = paymentLinkID;
    return this;
  }

   /**
   * Payment Link ID, used on payment link and to retrieve qrcode image
   * @return paymentLinkID
  **/
  @javax.annotation.Nullable
  public String getPaymentLinkID() {
    return paymentLinkID;
  }


  public void setPaymentLinkID(String paymentLinkID) {
    this.paymentLinkID = paymentLinkID;
  }


  public PixQrCode paymentLinkUrl(Object paymentLinkUrl) {
    
    this.paymentLinkUrl = paymentLinkUrl;
    return this;
  }

   /**
   * Payment Link URL to be shared with customers
   * @return paymentLinkUrl
  **/
  @javax.annotation.Nullable
  public Object getPaymentLinkUrl() {
    return paymentLinkUrl;
  }


  public void setPaymentLinkUrl(Object paymentLinkUrl) {
    this.paymentLinkUrl = paymentLinkUrl;
  }


  public PixQrCode qrCodeImage(Object qrCodeImage) {
    
    this.qrCodeImage = qrCodeImage;
    return this;
  }

   /**
   * QRCode image link URL
   * @return qrCodeImage
  **/
  @javax.annotation.Nullable
  public Object getQrCodeImage() {
    return qrCodeImage;
  }


  public void setQrCodeImage(Object qrCodeImage) {
    this.qrCodeImage = qrCodeImage;
  }


  public PixQrCode createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public PixQrCode updatedAt(String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PixQrCode pixQrCode = (PixQrCode) o;
    return Objects.equals(this.name, pixQrCode.name) &&
        Objects.equals(this.value, pixQrCode.value) &&
        Objects.equals(this.comment, pixQrCode.comment) &&
        Objects.equals(this.identifier, pixQrCode.identifier) &&
        Objects.equals(this.brCode, pixQrCode.brCode) &&
        Objects.equals(this.correlationID, pixQrCode.correlationID) &&
        Objects.equals(this.paymentLinkID, pixQrCode.paymentLinkID) &&
        Objects.equals(this.paymentLinkUrl, pixQrCode.paymentLinkUrl) &&
        Objects.equals(this.qrCodeImage, pixQrCode.qrCodeImage) &&
        Objects.equals(this.createdAt, pixQrCode.createdAt) &&
        Objects.equals(this.updatedAt, pixQrCode.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, value, comment, identifier, brCode, correlationID, paymentLinkID, paymentLinkUrl, qrCodeImage, createdAt, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PixQrCode {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    brCode: ").append(toIndentedString(brCode)).append("\n");
    sb.append("    correlationID: ").append(toIndentedString(correlationID)).append("\n");
    sb.append("    paymentLinkID: ").append(toIndentedString(paymentLinkID)).append("\n");
    sb.append("    paymentLinkUrl: ").append(toIndentedString(paymentLinkUrl)).append("\n");
    sb.append("    qrCodeImage: ").append(toIndentedString(qrCodeImage)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("value");
    openapiFields.add("comment");
    openapiFields.add("identifier");
    openapiFields.add("brCode");
    openapiFields.add("correlationID");
    openapiFields.add("paymentLinkID");
    openapiFields.add("paymentLinkUrl");
    openapiFields.add("qrCodeImage");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PixQrCode
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PixQrCode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PixQrCode is not found in the empty JSON string", PixQrCode.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PixQrCode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PixQrCode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("brCode") != null && !jsonObj.get("brCode").isJsonNull()) && !jsonObj.get("brCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brCode").toString()));
      }
      if ((jsonObj.get("correlationID") != null && !jsonObj.get("correlationID").isJsonNull()) && !jsonObj.get("correlationID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationID").toString()));
      }
      if ((jsonObj.get("paymentLinkID") != null && !jsonObj.get("paymentLinkID").isJsonNull()) && !jsonObj.get("paymentLinkID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentLinkID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentLinkID").toString()));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) && !jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PixQrCode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PixQrCode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PixQrCode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PixQrCode.class));

       return (TypeAdapter<T>) new TypeAdapter<PixQrCode>() {
           @Override
           public void write(JsonWriter out, PixQrCode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PixQrCode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PixQrCode given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PixQrCode
  * @throws IOException if the JSON string is invalid with respect to PixQrCode
  */
  public static PixQrCode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PixQrCode.class);
  }

 /**
  * Convert an instance of PixQrCode to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

