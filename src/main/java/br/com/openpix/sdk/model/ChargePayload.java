/*
 * Woovi
 * A Woovi é uma Plataforma de Gestão de Pagamentos. Para utilizar nossa API você deve acessar  __[https://api.woovi.com/](https://api.woovi.com/)__ e somente o mesmo. A Woovi não aceita subdominios para a API.  Veja como configurar seu acesso a nossa API [aqui](https://developers.woovi.com/docs/apis/api-getting-started).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package br.com.openpix.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import br.com.openpix.sdk.model.ChargeAdditionalInfoInner;
import br.com.openpix.sdk.model.ChargePayloadFines;
import br.com.openpix.sdk.model.ChargePayloadInterests;
import br.com.openpix.sdk.model.CustomerPayload;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import br.com.openpix.sdk.JSON;

/**
 * ChargePayload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-09T10:01:02.014525-03:00[America/Sao_Paulo]")
public class ChargePayload {
  public static final String SERIALIZED_NAME_CORRELATION_I_D = "correlationID";
  @SerializedName(SERIALIZED_NAME_CORRELATION_I_D)
  private String correlationID;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private BigDecimal value;

  /**
   * Charge type is used to determine whether a charge will have a deadline, fines and interests
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DYNAMIC("DYNAMIC"),
    
    OVERDUE("OVERDUE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expiresIn";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private BigDecimal expiresIn;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private CustomerPayload customer;

  public static final String SERIALIZED_NAME_DAYS_FOR_DUE_DATE = "daysForDueDate";
  @SerializedName(SERIALIZED_NAME_DAYS_FOR_DUE_DATE)
  private BigDecimal daysForDueDate;

  public static final String SERIALIZED_NAME_DAYS_AFTER_DUE_DATE = "daysAfterDueDate";
  @SerializedName(SERIALIZED_NAME_DAYS_AFTER_DUE_DATE)
  private BigDecimal daysAfterDueDate;

  public static final String SERIALIZED_NAME_INTERESTS = "interests";
  @SerializedName(SERIALIZED_NAME_INTERESTS)
  private ChargePayloadInterests interests;

  public static final String SERIALIZED_NAME_FINES = "fines";
  @SerializedName(SERIALIZED_NAME_FINES)
  private ChargePayloadFines fines;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private List<ChargeAdditionalInfoInner> additionalInfo;

  public ChargePayload() {
  }

  public ChargePayload correlationID(String correlationID) {
    
    this.correlationID = correlationID;
    return this;
  }

   /**
   * Your correlation ID to keep track of this charge
   * @return correlationID
  **/
  @javax.annotation.Nonnull
  public String getCorrelationID() {
    return correlationID;
  }


  public void setCorrelationID(String correlationID) {
    this.correlationID = correlationID;
  }


  public ChargePayload value(BigDecimal value) {
    
    this.value = value;
    return this;
  }

   /**
   * Value in cents of this charge
   * @return value
  **/
  @javax.annotation.Nonnull
  public BigDecimal getValue() {
    return value;
  }


  public void setValue(BigDecimal value) {
    this.value = value;
  }


  public ChargePayload type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Charge type is used to determine whether a charge will have a deadline, fines and interests
   * @return type
  **/
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ChargePayload comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Comment to be added in infoPagador
   * @return comment
  **/
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  public ChargePayload identifier(String identifier) {
    
    this.identifier = identifier;
    return this;
  }

   /**
   * Custom identifier for EMV
   * @return identifier
  **/
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }


  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public ChargePayload expiresIn(BigDecimal expiresIn) {
    
    this.expiresIn = expiresIn;
    return this;
  }

   /**
   * Expires the charge in seconds (minimum is 15 minutes)
   * @return expiresIn
  **/
  @javax.annotation.Nullable
  public BigDecimal getExpiresIn() {
    return expiresIn;
  }


  public void setExpiresIn(BigDecimal expiresIn) {
    this.expiresIn = expiresIn;
  }


  public ChargePayload customer(CustomerPayload customer) {
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  public CustomerPayload getCustomer() {
    return customer;
  }


  public void setCustomer(CustomerPayload customer) {
    this.customer = customer;
  }


  public ChargePayload daysForDueDate(BigDecimal daysForDueDate) {
    
    this.daysForDueDate = daysForDueDate;
    return this;
  }

   /**
   * Time in days until the charge hits the deadline so fines and interests start applying. This property is only considered for charges of type OVERDUE
   * @return daysForDueDate
  **/
  @javax.annotation.Nullable
  public BigDecimal getDaysForDueDate() {
    return daysForDueDate;
  }


  public void setDaysForDueDate(BigDecimal daysForDueDate) {
    this.daysForDueDate = daysForDueDate;
  }


  public ChargePayload daysAfterDueDate(BigDecimal daysAfterDueDate) {
    
    this.daysAfterDueDate = daysAfterDueDate;
    return this;
  }

   /**
   * Time in days that a charge is still payable after the deadline. This property is only considered for charges of type OVERDUE
   * @return daysAfterDueDate
  **/
  @javax.annotation.Nullable
  public BigDecimal getDaysAfterDueDate() {
    return daysAfterDueDate;
  }


  public void setDaysAfterDueDate(BigDecimal daysAfterDueDate) {
    this.daysAfterDueDate = daysAfterDueDate;
  }


  public ChargePayload interests(ChargePayloadInterests interests) {
    
    this.interests = interests;
    return this;
  }

   /**
   * Get interests
   * @return interests
  **/
  @javax.annotation.Nullable
  public ChargePayloadInterests getInterests() {
    return interests;
  }


  public void setInterests(ChargePayloadInterests interests) {
    this.interests = interests;
  }


  public ChargePayload fines(ChargePayloadFines fines) {
    
    this.fines = fines;
    return this;
  }

   /**
   * Get fines
   * @return fines
  **/
  @javax.annotation.Nullable
  public ChargePayloadFines getFines() {
    return fines;
  }


  public void setFines(ChargePayloadFines fines) {
    this.fines = fines;
  }


  public ChargePayload additionalInfo(List<ChargeAdditionalInfoInner> additionalInfo) {
    
    this.additionalInfo = additionalInfo;
    return this;
  }

  public ChargePayload addAdditionalInfoItem(ChargeAdditionalInfoInner additionalInfoItem) {
    if (this.additionalInfo == null) {
      this.additionalInfo = new ArrayList<>();
    }
    this.additionalInfo.add(additionalInfoItem);
    return this;
  }

   /**
   * Additional info of the charge
   * @return additionalInfo
  **/
  @javax.annotation.Nullable
  public List<ChargeAdditionalInfoInner> getAdditionalInfo() {
    return additionalInfo;
  }


  public void setAdditionalInfo(List<ChargeAdditionalInfoInner> additionalInfo) {
    this.additionalInfo = additionalInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargePayload chargePayload = (ChargePayload) o;
    return Objects.equals(this.correlationID, chargePayload.correlationID) &&
        Objects.equals(this.value, chargePayload.value) &&
        Objects.equals(this.type, chargePayload.type) &&
        Objects.equals(this.comment, chargePayload.comment) &&
        Objects.equals(this.identifier, chargePayload.identifier) &&
        Objects.equals(this.expiresIn, chargePayload.expiresIn) &&
        Objects.equals(this.customer, chargePayload.customer) &&
        Objects.equals(this.daysForDueDate, chargePayload.daysForDueDate) &&
        Objects.equals(this.daysAfterDueDate, chargePayload.daysAfterDueDate) &&
        Objects.equals(this.interests, chargePayload.interests) &&
        Objects.equals(this.fines, chargePayload.fines) &&
        Objects.equals(this.additionalInfo, chargePayload.additionalInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correlationID, value, type, comment, identifier, expiresIn, customer, daysForDueDate, daysAfterDueDate, interests, fines, additionalInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargePayload {\n");
    sb.append("    correlationID: ").append(toIndentedString(correlationID)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    daysForDueDate: ").append(toIndentedString(daysForDueDate)).append("\n");
    sb.append("    daysAfterDueDate: ").append(toIndentedString(daysAfterDueDate)).append("\n");
    sb.append("    interests: ").append(toIndentedString(interests)).append("\n");
    sb.append("    fines: ").append(toIndentedString(fines)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("correlationID");
    openapiFields.add("value");
    openapiFields.add("type");
    openapiFields.add("comment");
    openapiFields.add("identifier");
    openapiFields.add("expiresIn");
    openapiFields.add("customer");
    openapiFields.add("daysForDueDate");
    openapiFields.add("daysAfterDueDate");
    openapiFields.add("interests");
    openapiFields.add("fines");
    openapiFields.add("additionalInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("correlationID");
    openapiRequiredFields.add("value");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ChargePayload
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChargePayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChargePayload is not found in the empty JSON string", ChargePayload.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ChargePayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChargePayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChargePayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("correlationID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationID").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      // validate the optional field `interests`
      if (jsonObj.get("interests") != null && !jsonObj.get("interests").isJsonNull()) {
        ChargePayloadInterests.validateJsonElement(jsonObj.get("interests"));
      }
      // validate the optional field `fines`
      if (jsonObj.get("fines") != null && !jsonObj.get("fines").isJsonNull()) {
        ChargePayloadFines.validateJsonElement(jsonObj.get("fines"));
      }
      if (jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) {
        JsonArray jsonArrayadditionalInfo = jsonObj.getAsJsonArray("additionalInfo");
        if (jsonArrayadditionalInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalInfo` to be an array in the JSON string but got `%s`", jsonObj.get("additionalInfo").toString()));
          }

          // validate the optional field `additionalInfo` (array)
          for (int i = 0; i < jsonArrayadditionalInfo.size(); i++) {
            ChargeAdditionalInfoInner.validateJsonElement(jsonArrayadditionalInfo.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChargePayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChargePayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChargePayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChargePayload.class));

       return (TypeAdapter<T>) new TypeAdapter<ChargePayload>() {
           @Override
           public void write(JsonWriter out, ChargePayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChargePayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChargePayload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChargePayload
  * @throws IOException if the JSON string is invalid with respect to ChargePayload
  */
  public static ChargePayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChargePayload.class);
  }

 /**
  * Convert an instance of ChargePayload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

